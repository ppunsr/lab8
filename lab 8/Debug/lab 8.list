
lab 8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000444c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004790  08004790  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004798  08004798  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800479c  0800479c  0001479c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080047a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000078  08004818  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08004818  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc41  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd0  00000000  00000000  0002cce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002e9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  0002f5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001667a  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc3c  00000000  00000000  000467d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e1f1  00000000  00000000  0005340e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e15ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000380c  00000000  00000000  000e1654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080045d4 	.word	0x080045d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080045d4 	.word	0x080045d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b96e 	b.w	8000dc0 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468c      	mov	ip, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f040 8083 	bne.w	8000c12 <__udivmoddi4+0x116>
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	4617      	mov	r7, r2
 8000b10:	d947      	bls.n	8000ba2 <__udivmoddi4+0xa6>
 8000b12:	fab2 f282 	clz	r2, r2
 8000b16:	b142      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b18:	f1c2 0020 	rsb	r0, r2, #32
 8000b1c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b20:	4091      	lsls	r1, r2
 8000b22:	4097      	lsls	r7, r2
 8000b24:	ea40 0c01 	orr.w	ip, r0, r1
 8000b28:	4094      	lsls	r4, r2
 8000b2a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b2e:	0c23      	lsrs	r3, r4, #16
 8000b30:	fbbc f6f8 	udiv	r6, ip, r8
 8000b34:	fa1f fe87 	uxth.w	lr, r7
 8000b38:	fb08 c116 	mls	r1, r8, r6, ip
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb06 f10e 	mul.w	r1, r6, lr
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x60>
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b4e:	f080 8119 	bcs.w	8000d84 <__udivmoddi4+0x288>
 8000b52:	4299      	cmp	r1, r3
 8000b54:	f240 8116 	bls.w	8000d84 <__udivmoddi4+0x288>
 8000b58:	3e02      	subs	r6, #2
 8000b5a:	443b      	add	r3, r7
 8000b5c:	1a5b      	subs	r3, r3, r1
 8000b5e:	b2a4      	uxth	r4, r4
 8000b60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b64:	fb08 3310 	mls	r3, r8, r0, r3
 8000b68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b70:	45a6      	cmp	lr, r4
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x8c>
 8000b74:	193c      	adds	r4, r7, r4
 8000b76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7a:	f080 8105 	bcs.w	8000d88 <__udivmoddi4+0x28c>
 8000b7e:	45a6      	cmp	lr, r4
 8000b80:	f240 8102 	bls.w	8000d88 <__udivmoddi4+0x28c>
 8000b84:	3802      	subs	r0, #2
 8000b86:	443c      	add	r4, r7
 8000b88:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8c:	eba4 040e 	sub.w	r4, r4, lr
 8000b90:	2600      	movs	r6, #0
 8000b92:	b11d      	cbz	r5, 8000b9c <__udivmoddi4+0xa0>
 8000b94:	40d4      	lsrs	r4, r2
 8000b96:	2300      	movs	r3, #0
 8000b98:	e9c5 4300 	strd	r4, r3, [r5]
 8000b9c:	4631      	mov	r1, r6
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	b902      	cbnz	r2, 8000ba6 <__udivmoddi4+0xaa>
 8000ba4:	deff      	udf	#255	; 0xff
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	d150      	bne.n	8000c50 <__udivmoddi4+0x154>
 8000bae:	1bcb      	subs	r3, r1, r7
 8000bb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb4:	fa1f f887 	uxth.w	r8, r7
 8000bb8:	2601      	movs	r6, #1
 8000bba:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bbe:	0c21      	lsrs	r1, r4, #16
 8000bc0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bc8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0xe4>
 8000bd0:	1879      	adds	r1, r7, r1
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0xe2>
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	f200 80e9 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1ac9      	subs	r1, r1, r3
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x10c>
 8000bf8:	193c      	adds	r4, r7, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x10a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80d9 	bhi.w	8000db8 <__udivmoddi4+0x2bc>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e7bf      	b.n	8000b92 <__udivmoddi4+0x96>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x12e>
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	f000 80b1 	beq.w	8000d7e <__udivmoddi4+0x282>
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c22:	4630      	mov	r0, r6
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	fab3 f683 	clz	r6, r3
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d14a      	bne.n	8000cc8 <__udivmoddi4+0x1cc>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0x140>
 8000c36:	4282      	cmp	r2, r0
 8000c38:	f200 80b8 	bhi.w	8000dac <__udivmoddi4+0x2b0>
 8000c3c:	1a84      	subs	r4, r0, r2
 8000c3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	468c      	mov	ip, r1
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	d0a8      	beq.n	8000b9c <__udivmoddi4+0xa0>
 8000c4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c4e:	e7a5      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000c50:	f1c2 0320 	rsb	r3, r2, #32
 8000c54:	fa20 f603 	lsr.w	r6, r0, r3
 8000c58:	4097      	lsls	r7, r2
 8000c5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c62:	40d9      	lsrs	r1, r3
 8000c64:	4330      	orrs	r0, r6
 8000c66:	0c03      	lsrs	r3, r0, #16
 8000c68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c6c:	fa1f f887 	uxth.w	r8, r7
 8000c70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c78:	fb06 f108 	mul.w	r1, r6, r8
 8000c7c:	4299      	cmp	r1, r3
 8000c7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x19c>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c8a:	f080 808d 	bcs.w	8000da8 <__udivmoddi4+0x2ac>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 808a 	bls.w	8000da8 <__udivmoddi4+0x2ac>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b281      	uxth	r1, r0
 8000c9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca8:	fb00 f308 	mul.w	r3, r0, r8
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x1c4>
 8000cb0:	1879      	adds	r1, r7, r1
 8000cb2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cb6:	d273      	bcs.n	8000da0 <__udivmoddi4+0x2a4>
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d971      	bls.n	8000da0 <__udivmoddi4+0x2a4>
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	4439      	add	r1, r7
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cc6:	e778      	b.n	8000bba <__udivmoddi4+0xbe>
 8000cc8:	f1c6 0c20 	rsb	ip, r6, #32
 8000ccc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cd0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cd4:	431c      	orrs	r4, r3
 8000cd6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cda:	fa01 f306 	lsl.w	r3, r1, r6
 8000cde:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ce2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ce6:	431f      	orrs	r7, r3
 8000ce8:	0c3b      	lsrs	r3, r7, #16
 8000cea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cee:	fa1f f884 	uxth.w	r8, r4
 8000cf2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cf6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cfa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cfe:	458a      	cmp	sl, r1
 8000d00:	fa02 f206 	lsl.w	r2, r2, r6
 8000d04:	fa00 f306 	lsl.w	r3, r0, r6
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x220>
 8000d0a:	1861      	adds	r1, r4, r1
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d10:	d248      	bcs.n	8000da4 <__udivmoddi4+0x2a8>
 8000d12:	458a      	cmp	sl, r1
 8000d14:	d946      	bls.n	8000da4 <__udivmoddi4+0x2a8>
 8000d16:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1a:	4421      	add	r1, r4
 8000d1c:	eba1 010a 	sub.w	r1, r1, sl
 8000d20:	b2bf      	uxth	r7, r7
 8000d22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d2e:	fb00 f808 	mul.w	r8, r0, r8
 8000d32:	45b8      	cmp	r8, r7
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x24a>
 8000d36:	19e7      	adds	r7, r4, r7
 8000d38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3c:	d22e      	bcs.n	8000d9c <__udivmoddi4+0x2a0>
 8000d3e:	45b8      	cmp	r8, r7
 8000d40:	d92c      	bls.n	8000d9c <__udivmoddi4+0x2a0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	4427      	add	r7, r4
 8000d46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4a:	eba7 0708 	sub.w	r7, r7, r8
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	454f      	cmp	r7, r9
 8000d54:	46c6      	mov	lr, r8
 8000d56:	4649      	mov	r1, r9
 8000d58:	d31a      	bcc.n	8000d90 <__udivmoddi4+0x294>
 8000d5a:	d017      	beq.n	8000d8c <__udivmoddi4+0x290>
 8000d5c:	b15d      	cbz	r5, 8000d76 <__udivmoddi4+0x27a>
 8000d5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d62:	eb67 0701 	sbc.w	r7, r7, r1
 8000d66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d6a:	40f2      	lsrs	r2, r6
 8000d6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d70:	40f7      	lsrs	r7, r6
 8000d72:	e9c5 2700 	strd	r2, r7, [r5]
 8000d76:	2600      	movs	r6, #0
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e70b      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0x60>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6fd      	b.n	8000b88 <__udivmoddi4+0x8c>
 8000d8c:	4543      	cmp	r3, r8
 8000d8e:	d2e5      	bcs.n	8000d5c <__udivmoddi4+0x260>
 8000d90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d94:	eb69 0104 	sbc.w	r1, r9, r4
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7df      	b.n	8000d5c <__udivmoddi4+0x260>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e7d2      	b.n	8000d46 <__udivmoddi4+0x24a>
 8000da0:	4660      	mov	r0, ip
 8000da2:	e78d      	b.n	8000cc0 <__udivmoddi4+0x1c4>
 8000da4:	4681      	mov	r9, r0
 8000da6:	e7b9      	b.n	8000d1c <__udivmoddi4+0x220>
 8000da8:	4666      	mov	r6, ip
 8000daa:	e775      	b.n	8000c98 <__udivmoddi4+0x19c>
 8000dac:	4630      	mov	r0, r6
 8000dae:	e74a      	b.n	8000c46 <__udivmoddi4+0x14a>
 8000db0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000db4:	4439      	add	r1, r7
 8000db6:	e713      	b.n	8000be0 <__udivmoddi4+0xe4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	443c      	add	r4, r7
 8000dbc:	e724      	b.n	8000c08 <__udivmoddi4+0x10c>
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b0ca      	sub	sp, #296	; 0x128
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dca:	f000 fe45 	bl	8001a58 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 8000dce:	f000 fb5f 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd2:	f000 fc3d 	bl	8001650 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dd6:	f000 fc11 	bl	80015fc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000dda:	f000 fbc3 	bl	8001564 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	  char temp[]="HELLO WORLD\r\n please type something to test UART\r\n";
 8000dde:	4bc6      	ldr	r3, [pc, #792]	; (80010f8 <main+0x334>)
 8000de0:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8000de4:	461d      	mov	r5, r3
 8000de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df2:	682b      	ldr	r3, [r5, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	8022      	strh	r2, [r4, #0]
 8000df8:	3402      	adds	r4, #2
 8000dfa:	0c1b      	lsrs	r3, r3, #16
 8000dfc:	7023      	strb	r3, [r4, #0]
	  char Menu[]= "Menu1 please press 0\r\n Menu2 please press 1\r\n";
 8000dfe:	4bbf      	ldr	r3, [pc, #764]	; (80010fc <main+0x338>)
 8000e00:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8000e04:	461d      	mov	r5, r3
 8000e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e12:	c407      	stmia	r4!, {r0, r1, r2}
 8000e14:	8023      	strh	r3, [r4, #0]
	  char Menu1[]="a = frequency +1hz\r\n s= frequency - 1hz\r\n d= LED On/OFF\r\n x= Back\r\n";
 8000e16:	4aba      	ldr	r2, [pc, #744]	; (8001100 <main+0x33c>)
 8000e18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	2244      	movs	r2, #68	; 0x44
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 ffa1 	bl	8003d68 <memcpy>
	  char Menu2[]="Show buttonStatus\r\n x= Back\r\n ";
 8000e26:	4bb7      	ldr	r3, [pc, #732]	; (8001104 <main+0x340>)
 8000e28:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000e2c:	461d      	mov	r5, r3
 8000e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e36:	c407      	stmia	r4!, {r0, r1, r2}
 8000e38:	8023      	strh	r3, [r4, #0]
 8000e3a:	3402      	adds	r4, #2
 8000e3c:	0c1b      	lsrs	r3, r3, #16
 8000e3e:	7023      	strb	r3, [r4, #0]
	  char Buttonpress[] = "Button Press\r\n";
 8000e40:	4bb1      	ldr	r3, [pc, #708]	; (8001108 <main+0x344>)
 8000e42:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e48:	c407      	stmia	r4!, {r0, r1, r2}
 8000e4a:	8023      	strh	r3, [r4, #0]
 8000e4c:	3402      	adds	r4, #2
 8000e4e:	0c1b      	lsrs	r3, r3, #16
 8000e50:	7023      	strb	r3, [r4, #0]
	  char Buttonunpress[] = "Button UnPress\r\n";
 8000e52:	4bae      	ldr	r3, [pc, #696]	; (800110c <main+0x348>)
 8000e54:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000e58:	461d      	mov	r5, r3
 8000e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5e:	682b      	ldr	r3, [r5, #0]
 8000e60:	7023      	strb	r3, [r4, #0]
	  char Error[] = "Error Please try again\r\n";
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4aaa      	ldr	r2, [pc, #680]	; (8001110 <main+0x34c>)
 8000e68:	461c      	mov	r4, r3
 8000e6a:	4615      	mov	r5, r2
 8000e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e74:	c403      	stmia	r4!, {r0, r1}
 8000e76:	7022      	strb	r2, [r4, #0]
	  char LEDON[]="LED ON\r\n";
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4aa5      	ldr	r2, [pc, #660]	; (8001114 <main+0x350>)
 8000e7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e80:	c303      	stmia	r3!, {r0, r1}
 8000e82:	701a      	strb	r2, [r3, #0]
	  char LEDOFF[]="LED OFF\r\n";
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4aa4      	ldr	r2, [pc, #656]	; (8001118 <main+0x354>)
 8000e88:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e8a:	c303      	stmia	r3!, {r0, r1}
 8000e8c:	801a      	strh	r2, [r3, #0]
		/*Method 1 Polling Mode*/

//		UARTRecieveAndResponsePolling();

		/*Method 2 Interrupt Mode*/
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000e8e:	2220      	movs	r2, #32
 8000e90:	49a2      	ldr	r1, [pc, #648]	; (800111c <main+0x358>)
 8000e92:	48a3      	ldr	r0, [pc, #652]	; (8001120 <main+0x35c>)
 8000e94:	f002 f9b5 	bl	8003202 <HAL_UART_Receive_IT>

		/*Method 2 W/ 1 Char Received*/
		int16_t inputchar = UARTRecieveIT();
 8000e98:	f000 fc4a 	bl	8001730 <UARTRecieveIT>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
		if(inputchar!=-1)
 8000ea2:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8000ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eaa:	d011      	beq.n	8000ed0 <main+0x10c>
		{

			sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
 8000eac:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	499c      	ldr	r1, [pc, #624]	; (8001124 <main+0x360>)
 8000eb4:	489c      	ldr	r0, [pc, #624]	; (8001128 <main+0x364>)
 8000eb6:	f002 ff6d 	bl	8003d94 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000eba:	489b      	ldr	r0, [pc, #620]	; (8001128 <main+0x364>)
 8000ebc:	f7ff f990 	bl	80001e0 <strlen>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec8:	4997      	ldr	r1, [pc, #604]	; (8001128 <main+0x364>)
 8000eca:	4895      	ldr	r0, [pc, #596]	; (8001120 <main+0x35c>)
 8000ecc:	f002 f907 	bl	80030de <HAL_UART_Transmit>
		}
		switch(STATE_Display)
 8000ed0:	4b96      	ldr	r3, [pc, #600]	; (800112c <main+0x368>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	2b28      	cmp	r3, #40	; 0x28
 8000ed6:	f300 80a1 	bgt.w	800101c <main+0x258>
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da46      	bge.n	8000f6c <main+0x1a8>
 8000ede:	e27c      	b.n	80013da <main+0x616>
 8000ee0:	3b32      	subs	r3, #50	; 0x32
 8000ee2:	2b1e      	cmp	r3, #30
 8000ee4:	f200 8279 	bhi.w	80013da <main+0x616>
 8000ee8:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <main+0x12c>)
 8000eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eee:	bf00      	nop
 8000ef0:	08001219 	.word	0x08001219
 8000ef4:	080013db 	.word	0x080013db
 8000ef8:	080013db 	.word	0x080013db
 8000efc:	080013db 	.word	0x080013db
 8000f00:	080013db 	.word	0x080013db
 8000f04:	080013db 	.word	0x080013db
 8000f08:	080013db 	.word	0x080013db
 8000f0c:	080013db 	.word	0x080013db
 8000f10:	080013db 	.word	0x080013db
 8000f14:	080013db 	.word	0x080013db
 8000f18:	0800128b 	.word	0x0800128b
 8000f1c:	080013db 	.word	0x080013db
 8000f20:	080013db 	.word	0x080013db
 8000f24:	080013db 	.word	0x080013db
 8000f28:	080013db 	.word	0x080013db
 8000f2c:	080013db 	.word	0x080013db
 8000f30:	080013db 	.word	0x080013db
 8000f34:	080013db 	.word	0x080013db
 8000f38:	080013db 	.word	0x080013db
 8000f3c:	080013db 	.word	0x080013db
 8000f40:	080012fd 	.word	0x080012fd
 8000f44:	080013db 	.word	0x080013db
 8000f48:	080013db 	.word	0x080013db
 8000f4c:	080013db 	.word	0x080013db
 8000f50:	080013db 	.word	0x080013db
 8000f54:	080013db 	.word	0x080013db
 8000f58:	080013db 	.word	0x080013db
 8000f5c:	080013db 	.word	0x080013db
 8000f60:	080013db 	.word	0x080013db
 8000f64:	080013db 	.word	0x080013db
 8000f68:	080010b9 	.word	0x080010b9
 8000f6c:	2b28      	cmp	r3, #40	; 0x28
 8000f6e:	f200 8234 	bhi.w	80013da <main+0x616>
 8000f72:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <main+0x1b4>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	0800102b 	.word	0x0800102b
 8000f7c:	080013db 	.word	0x080013db
 8000f80:	080013db 	.word	0x080013db
 8000f84:	080013db 	.word	0x080013db
 8000f88:	080013db 	.word	0x080013db
 8000f8c:	080013db 	.word	0x080013db
 8000f90:	080013db 	.word	0x080013db
 8000f94:	080013db 	.word	0x080013db
 8000f98:	080013db 	.word	0x080013db
 8000f9c:	080013db 	.word	0x080013db
 8000fa0:	08001033 	.word	0x08001033
 8000fa4:	08001055 	.word	0x08001055
 8000fa8:	080013db 	.word	0x080013db
 8000fac:	080013db 	.word	0x080013db
 8000fb0:	080013db 	.word	0x080013db
 8000fb4:	080013db 	.word	0x080013db
 8000fb8:	080013db 	.word	0x080013db
 8000fbc:	080013db 	.word	0x080013db
 8000fc0:	080013db 	.word	0x080013db
 8000fc4:	080013db 	.word	0x080013db
 8000fc8:	08001075 	.word	0x08001075
 8000fcc:	080013db 	.word	0x080013db
 8000fd0:	080013db 	.word	0x080013db
 8000fd4:	080013db 	.word	0x080013db
 8000fd8:	080013db 	.word	0x080013db
 8000fdc:	080013db 	.word	0x080013db
 8000fe0:	080013db 	.word	0x080013db
 8000fe4:	080013db 	.word	0x080013db
 8000fe8:	080013db 	.word	0x080013db
 8000fec:	080013db 	.word	0x080013db
 8000ff0:	08001097 	.word	0x08001097
 8000ff4:	080013db 	.word	0x080013db
 8000ff8:	080013db 	.word	0x080013db
 8000ffc:	080013db 	.word	0x080013db
 8001000:	080013db 	.word	0x080013db
 8001004:	080013db 	.word	0x080013db
 8001008:	080013db 	.word	0x080013db
 800100c:	080013db 	.word	0x080013db
 8001010:	080013db 	.word	0x080013db
 8001014:	080013db 	.word	0x080013db
 8001018:	0800116b 	.word	0x0800116b
 800101c:	2b50      	cmp	r3, #80	; 0x50
 800101e:	f300 81dc 	bgt.w	80013da <main+0x616>
 8001022:	2b32      	cmp	r3, #50	; 0x32
 8001024:	f6bf af5c 	bge.w	8000ee0 <main+0x11c>
 8001028:	e1d7      	b.n	80013da <main+0x616>
		{
		case StateDisplay_Start:
			STATE_Display = StateDisplay_Menu_Print;
 800102a:	4b40      	ldr	r3, [pc, #256]	; (800112c <main+0x368>)
 800102c:	220a      	movs	r2, #10
 800102e:	801a      	strh	r2, [r3, #0]
			break;
 8001030:	e1d3      	b.n	80013da <main+0x616>
		case StateDisplay_Menu_Print:
			HAL_UART_Transmit(&huart2, (u_int8_t*)Menu, strlen(Menu), 10);
 8001032:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff f8d2 	bl	80001e0 <strlen>
 800103c:	4603      	mov	r3, r0
 800103e:	b29a      	uxth	r2, r3
 8001040:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8001044:	230a      	movs	r3, #10
 8001046:	4836      	ldr	r0, [pc, #216]	; (8001120 <main+0x35c>)
 8001048:	f002 f849 	bl	80030de <HAL_UART_Transmit>
			 STATE_Display = StateDisplay_Menu_WaitInput;
 800104c:	4b37      	ldr	r3, [pc, #220]	; (800112c <main+0x368>)
 800104e:	220b      	movs	r2, #11
 8001050:	801a      	strh	r2, [r3, #0]
			 break;
 8001052:	e1c2      	b.n	80013da <main+0x616>
		case StateDisplay_Menu_WaitInput:
		switch(inputchar)
 8001054:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8001058:	2b30      	cmp	r3, #48	; 0x30
 800105a:	d002      	beq.n	8001062 <main+0x29e>
 800105c:	2b31      	cmp	r3, #49	; 0x31
 800105e:	d004      	beq.n	800106a <main+0x2a6>
			break;
//		default:
//			HAL_UART_Transmit(&huart2, (u_int8_t*)Error, strlen(Error), 10);
//			break;
		}
		break;
 8001060:	e1bb      	b.n	80013da <main+0x616>
			STATE_Display = StateDisplay_Menu1_Print;
 8001062:	4b32      	ldr	r3, [pc, #200]	; (800112c <main+0x368>)
 8001064:	2214      	movs	r2, #20
 8001066:	801a      	strh	r2, [r3, #0]
			break;
 8001068:	e003      	b.n	8001072 <main+0x2ae>
			STATE_Display = StateDisplay_Menu2_Print;
 800106a:	4b30      	ldr	r3, [pc, #192]	; (800112c <main+0x368>)
 800106c:	221e      	movs	r2, #30
 800106e:	801a      	strh	r2, [r3, #0]
			break;
 8001070:	bf00      	nop
		break;
 8001072:	e1b2      	b.n	80013da <main+0x616>
		case StateDisplay_Menu1_Print:
			HAL_UART_Transmit(&huart2, (u_int8_t*)Menu1, strlen(Menu1), 10);
 8001074:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f8b1 	bl	80001e0 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001086:	230a      	movs	r3, #10
 8001088:	4825      	ldr	r0, [pc, #148]	; (8001120 <main+0x35c>)
 800108a:	f002 f828 	bl	80030de <HAL_UART_Transmit>
			 STATE_Display = StateDisplay_LED_Control;
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <main+0x368>)
 8001090:	2228      	movs	r2, #40	; 0x28
 8001092:	801a      	strh	r2, [r3, #0]
			 break;
 8001094:	e1a1      	b.n	80013da <main+0x616>
		case StateDisplay_Menu2_Print:
			HAL_UART_Transmit(&huart2, (u_int8_t*)Menu2, strlen(Menu2), 10);
 8001096:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f8a0 	bl	80001e0 <strlen>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80010a8:	230a      	movs	r3, #10
 80010aa:	481d      	ldr	r0, [pc, #116]	; (8001120 <main+0x35c>)
 80010ac:	f002 f817 	bl	80030de <HAL_UART_Transmit>
			STATE_Display = StateDisplay_Show_Status_Button ;
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <main+0x368>)
 80010b2:	2250      	movs	r2, #80	; 0x50
 80010b4:	801a      	strh	r2, [r3, #0]
			break;
 80010b6:	e190      	b.n	80013da <main+0x616>
		case StateDisplay_Show_Status_Button:
			Switch[0]=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80010b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010bc:	481c      	ldr	r0, [pc, #112]	; (8001130 <main+0x36c>)
 80010be:	f001 f865 	bl	800218c <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <main+0x370>)
 80010c8:	701a      	strb	r2, [r3, #0]
			if (Switch[0]==0 && Switch[1]==1)
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <main+0x370>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d132      	bne.n	8001138 <main+0x374>
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <main+0x370>)
 80010d4:	785b      	ldrb	r3, [r3, #1]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d12e      	bne.n	8001138 <main+0x374>
			{
				HAL_UART_Transmit(&huart2, (u_int8_t*)Buttonpress, strlen(Buttonpress), 10);
 80010da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f87e 	bl	80001e0 <strlen>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80010ec:	230a      	movs	r3, #10
 80010ee:	480c      	ldr	r0, [pc, #48]	; (8001120 <main+0x35c>)
 80010f0:	f001 fff5 	bl	80030de <HAL_UART_Transmit>
 80010f4:	e035      	b.n	8001162 <main+0x39e>
 80010f6:	bf00      	nop
 80010f8:	08004614 	.word	0x08004614
 80010fc:	08004648 	.word	0x08004648
 8001100:	08004678 	.word	0x08004678
 8001104:	080046bc 	.word	0x080046bc
 8001108:	080046dc 	.word	0x080046dc
 800110c:	080046ec 	.word	0x080046ec
 8001110:	08004700 	.word	0x08004700
 8001114:	0800471c 	.word	0x0800471c
 8001118:	08004728 	.word	0x08004728
 800111c:	200000b4 	.word	0x200000b4
 8001120:	2000015c 	.word	0x2000015c
 8001124:	080045ec 	.word	0x080045ec
 8001128:	20000094 	.word	0x20000094
 800112c:	200000ee 	.word	0x200000ee
 8001130:	40020800 	.word	0x40020800
 8001134:	200000f4 	.word	0x200000f4
			}
			else if (Switch[0]==1 && Switch[1]==0)
 8001138:	4b9a      	ldr	r3, [pc, #616]	; (80013a4 <main+0x5e0>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d110      	bne.n	8001162 <main+0x39e>
 8001140:	4b98      	ldr	r3, [pc, #608]	; (80013a4 <main+0x5e0>)
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10c      	bne.n	8001162 <main+0x39e>
			{
				HAL_UART_Transmit(&huart2, (u_int8_t*)Buttonunpress, strlen(Buttonunpress), 10);
 8001148:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f847 	bl	80001e0 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800115a:	230a      	movs	r3, #10
 800115c:	4892      	ldr	r0, [pc, #584]	; (80013a8 <main+0x5e4>)
 800115e:	f001 ffbe 	bl	80030de <HAL_UART_Transmit>

			}
			Switch[1]=Switch[0];
 8001162:	4b90      	ldr	r3, [pc, #576]	; (80013a4 <main+0x5e0>)
 8001164:	781a      	ldrb	r2, [r3, #0]
 8001166:	4b8f      	ldr	r3, [pc, #572]	; (80013a4 <main+0x5e0>)
 8001168:	705a      	strb	r2, [r3, #1]
		case StateDisplay_LED_Control:
				switch(inputchar)
 800116a:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 800116e:	2b30      	cmp	r3, #48	; 0x30
 8001170:	d050      	beq.n	8001214 <main+0x450>
 8001172:	2b30      	cmp	r3, #48	; 0x30
 8001174:	f2c0 8130 	blt.w	80013d8 <main+0x614>
 8001178:	2b78      	cmp	r3, #120	; 0x78
 800117a:	f300 812d 	bgt.w	80013d8 <main+0x614>
 800117e:	2b61      	cmp	r3, #97	; 0x61
 8001180:	f2c0 812a 	blt.w	80013d8 <main+0x614>
 8001184:	3b61      	subs	r3, #97	; 0x61
 8001186:	2b17      	cmp	r3, #23
 8001188:	f200 8126 	bhi.w	80013d8 <main+0x614>
 800118c:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <main+0x3d0>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011f5 	.word	0x080011f5
 8001198:	080013d9 	.word	0x080013d9
 800119c:	080013d9 	.word	0x080013d9
 80011a0:	08001205 	.word	0x08001205
 80011a4:	080013d9 	.word	0x080013d9
 80011a8:	080013d9 	.word	0x080013d9
 80011ac:	080013d9 	.word	0x080013d9
 80011b0:	080013d9 	.word	0x080013d9
 80011b4:	080013d9 	.word	0x080013d9
 80011b8:	080013d9 	.word	0x080013d9
 80011bc:	080013d9 	.word	0x080013d9
 80011c0:	080013d9 	.word	0x080013d9
 80011c4:	080013d9 	.word	0x080013d9
 80011c8:	080013d9 	.word	0x080013d9
 80011cc:	080013d9 	.word	0x080013d9
 80011d0:	080013d9 	.word	0x080013d9
 80011d4:	080013d9 	.word	0x080013d9
 80011d8:	080013d9 	.word	0x080013d9
 80011dc:	080011fd 	.word	0x080011fd
 80011e0:	080013d9 	.word	0x080013d9
 80011e4:	080013d9 	.word	0x080013d9
 80011e8:	080013d9 	.word	0x080013d9
 80011ec:	080013d9 	.word	0x080013d9
 80011f0:	0800120d 	.word	0x0800120d
				{
				case'0':
					break;
				case 'a':
					STATE_Display= StateDisplay_LED_Increase_Frequency;
 80011f4:	4b6d      	ldr	r3, [pc, #436]	; (80013ac <main+0x5e8>)
 80011f6:	2232      	movs	r2, #50	; 0x32
 80011f8:	801a      	strh	r2, [r3, #0]
					break;
 80011fa:	e00c      	b.n	8001216 <main+0x452>
				case 's':
					STATE_Display= StateDisplay_LED_Decrease_Frequency;
 80011fc:	4b6b      	ldr	r3, [pc, #428]	; (80013ac <main+0x5e8>)
 80011fe:	223c      	movs	r2, #60	; 0x3c
 8001200:	801a      	strh	r2, [r3, #0]
					break;
 8001202:	e008      	b.n	8001216 <main+0x452>
				case 'd':
					STATE_Display= StateDisplay_LED_ONOFF;
 8001204:	4b69      	ldr	r3, [pc, #420]	; (80013ac <main+0x5e8>)
 8001206:	2246      	movs	r2, #70	; 0x46
 8001208:	801a      	strh	r2, [r3, #0]
					break;
 800120a:	e004      	b.n	8001216 <main+0x452>
				case 'x':
					STATE_Display= StateDisplay_Menu_Print;
 800120c:	4b67      	ldr	r3, [pc, #412]	; (80013ac <main+0x5e8>)
 800120e:	220a      	movs	r2, #10
 8001210:	801a      	strh	r2, [r3, #0]
					break;
 8001212:	e000      	b.n	8001216 <main+0x452>
					break;
 8001214:	bf00      	nop
				}

				break;
 8001216:	e0df      	b.n	80013d8 <main+0x614>
//			STATE_Display=StateDisplay_LED_Control;
//			break;


		case StateDisplay_LED_Increase_Frequency:
				frequency+=1;
 8001218:	4b65      	ldr	r3, [pc, #404]	; (80013b0 <main+0x5ec>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	4a64      	ldr	r2, [pc, #400]	; (80013b0 <main+0x5ec>)
 8001220:	6013      	str	r3, [r2, #0]
				period= 1.0/frequency;
 8001222:	4b63      	ldr	r3, [pc, #396]	; (80013b0 <main+0x5ec>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f984 	bl	8000534 <__aeabi_i2d>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	f04f 0000 	mov.w	r0, #0
 8001234:	495f      	ldr	r1, [pc, #380]	; (80013b4 <main+0x5f0>)
 8001236:	f7ff fb11 	bl	800085c <__aeabi_ddiv>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4610      	mov	r0, r2
 8001240:	4619      	mov	r1, r3
 8001242:	f7ff fbf3 	bl	8000a2c <__aeabi_d2f>
 8001246:	4603      	mov	r3, r0
 8001248:	4a5b      	ldr	r2, [pc, #364]	; (80013b8 <main+0x5f4>)
 800124a:	6013      	str	r3, [r2, #0]
				LED_DELAY=period *500;
 800124c:	4b5a      	ldr	r3, [pc, #360]	; (80013b8 <main+0x5f4>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80013bc <main+0x5f8>
 8001256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125a:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <main+0x5fc>)
 800125c:	edc3 7a00 	vstr	s15, [r3]
				sprintf(LEDfrequency,"Frequency: %d Hz\r\n",frequency);
 8001260:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <main+0x5ec>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4957      	ldr	r1, [pc, #348]	; (80013c4 <main+0x600>)
 8001268:	4857      	ldr	r0, [pc, #348]	; (80013c8 <main+0x604>)
 800126a:	f002 fd93 	bl	8003d94 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)LEDfrequency, strlen(LEDfrequency), 10);
 800126e:	4856      	ldr	r0, [pc, #344]	; (80013c8 <main+0x604>)
 8001270:	f7fe ffb6 	bl	80001e0 <strlen>
 8001274:	4603      	mov	r3, r0
 8001276:	b29a      	uxth	r2, r3
 8001278:	230a      	movs	r3, #10
 800127a:	4953      	ldr	r1, [pc, #332]	; (80013c8 <main+0x604>)
 800127c:	484a      	ldr	r0, [pc, #296]	; (80013a8 <main+0x5e4>)
 800127e:	f001 ff2e 	bl	80030de <HAL_UART_Transmit>
//				{
//					TimeStamp=HAL_GetTick();
//					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//a
//				}
				STATE_Display= StateDisplay_LED_Control;
 8001282:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <main+0x5e8>)
 8001284:	2228      	movs	r2, #40	; 0x28
 8001286:	801a      	strh	r2, [r3, #0]
		break;
 8001288:	e0a7      	b.n	80013da <main+0x616>
		case StateDisplay_LED_Decrease_Frequency:
			frequency-=1;
 800128a:	4b49      	ldr	r3, [pc, #292]	; (80013b0 <main+0x5ec>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	3b01      	subs	r3, #1
 8001290:	4a47      	ldr	r2, [pc, #284]	; (80013b0 <main+0x5ec>)
 8001292:	6013      	str	r3, [r2, #0]
			period= 1.0/frequency;
 8001294:	4b46      	ldr	r3, [pc, #280]	; (80013b0 <main+0x5ec>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f94b 	bl	8000534 <__aeabi_i2d>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	f04f 0000 	mov.w	r0, #0
 80012a6:	4943      	ldr	r1, [pc, #268]	; (80013b4 <main+0x5f0>)
 80012a8:	f7ff fad8 	bl	800085c <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fbba 	bl	8000a2c <__aeabi_d2f>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a3f      	ldr	r2, [pc, #252]	; (80013b8 <main+0x5f4>)
 80012bc:	6013      	str	r3, [r2, #0]
			LED_DELAY=period *500;
 80012be:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <main+0x5f4>)
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80013bc <main+0x5f8>
 80012c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012cc:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <main+0x5fc>)
 80012ce:	edc3 7a00 	vstr	s15, [r3]
			sprintf(LEDfrequency,"Frequency: %d Hz\r\n",frequency);
 80012d2:	4b37      	ldr	r3, [pc, #220]	; (80013b0 <main+0x5ec>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	493a      	ldr	r1, [pc, #232]	; (80013c4 <main+0x600>)
 80012da:	483b      	ldr	r0, [pc, #236]	; (80013c8 <main+0x604>)
 80012dc:	f002 fd5a 	bl	8003d94 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)LEDfrequency, strlen(LEDfrequency), 10);
 80012e0:	4839      	ldr	r0, [pc, #228]	; (80013c8 <main+0x604>)
 80012e2:	f7fe ff7d 	bl	80001e0 <strlen>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	230a      	movs	r3, #10
 80012ec:	4936      	ldr	r1, [pc, #216]	; (80013c8 <main+0x604>)
 80012ee:	482e      	ldr	r0, [pc, #184]	; (80013a8 <main+0x5e4>)
 80012f0:	f001 fef5 	bl	80030de <HAL_UART_Transmit>
//			{
//				TimeStamp=HAL_GetTick();
//				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//			}

			STATE_Display= StateDisplay_LED_Control;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <main+0x5e8>)
 80012f6:	2228      	movs	r2, #40	; 0x28
 80012f8:	801a      	strh	r2, [r3, #0]
			break;
 80012fa:	e06e      	b.n	80013da <main+0x616>
		case StateDisplay_LED_ONOFF:
			LED+=1;
 80012fc:	4b33      	ldr	r3, [pc, #204]	; (80013cc <main+0x608>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a32      	ldr	r2, [pc, #200]	; (80013cc <main+0x608>)
 8001304:	6013      	str	r3, [r2, #0]
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)==GPIO_PIN_RESET && count%2==0)
 8001306:	2120      	movs	r1, #32
 8001308:	4831      	ldr	r0, [pc, #196]	; (80013d0 <main+0x60c>)
 800130a:	f000 ff3f 	bl	800218c <HAL_GPIO_ReadPin>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d11d      	bne.n	8001350 <main+0x58c>
 8001314:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <main+0x610>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d117      	bne.n	8001350 <main+0x58c>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	2120      	movs	r1, #32
 8001324:	482a      	ldr	r0, [pc, #168]	; (80013d0 <main+0x60c>)
 8001326:	f000 ff49 	bl	80021bc <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, (u_int8_t*)LEDON, strlen(LEDON), 10);
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4618      	mov	r0, r3
 8001330:	f7fe ff56 	bl	80001e0 <strlen>
 8001334:	4603      	mov	r3, r0
 8001336:	b29a      	uxth	r2, r3
 8001338:	f107 0110 	add.w	r1, r7, #16
 800133c:	230a      	movs	r3, #10
 800133e:	481a      	ldr	r0, [pc, #104]	; (80013a8 <main+0x5e4>)
 8001340:	f001 fecd 	bl	80030de <HAL_UART_Transmit>
				count+=1;
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <main+0x610>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	4a22      	ldr	r2, [pc, #136]	; (80013d4 <main+0x610>)
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e024      	b.n	800139a <main+0x5d6>
//				count%2==0;
//				TimeStamp=HAL_GetTick();
//				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//				count+=1;
//			}
			else if(count%2==1)
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <main+0x610>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	bfb8      	it	lt
 800135c:	425b      	neglt	r3, r3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d11b      	bne.n	800139a <main+0x5d6>
			{
				HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)==GPIO_PIN_SET;
 8001362:	2120      	movs	r1, #32
 8001364:	481a      	ldr	r0, [pc, #104]	; (80013d0 <main+0x60c>)
 8001366:	f000 ff11 	bl	800218c <HAL_GPIO_ReadPin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2120      	movs	r1, #32
 800136e:	4818      	ldr	r0, [pc, #96]	; (80013d0 <main+0x60c>)
 8001370:	f000 ff24 	bl	80021bc <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, (u_int8_t*)LEDOFF, strlen(LEDOFF), 10);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4618      	mov	r0, r3
 8001378:	f7fe ff32 	bl	80001e0 <strlen>
 800137c:	4603      	mov	r3, r0
 800137e:	b29a      	uxth	r2, r3
 8001380:	1d39      	adds	r1, r7, #4
 8001382:	230a      	movs	r3, #10
 8001384:	4808      	ldr	r0, [pc, #32]	; (80013a8 <main+0x5e4>)
 8001386:	f001 feaa 	bl	80030de <HAL_UART_Transmit>
				count+=1;
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <main+0x610>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <main+0x610>)
 8001392:	6013      	str	r3, [r2, #0]
				LED=0;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <main+0x608>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
			}
			STATE_Display= StateDisplay_LED_Control;
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <main+0x5e8>)
 800139c:	2228      	movs	r2, #40	; 0x28
 800139e:	801a      	strh	r2, [r3, #0]
			break;
 80013a0:	e01b      	b.n	80013da <main+0x616>
 80013a2:	bf00      	nop
 80013a4:	200000f4 	.word	0x200000f4
 80013a8:	2000015c 	.word	0x2000015c
 80013ac:	200000ee 	.word	0x200000ee
 80013b0:	20000000 	.word	0x20000000
 80013b4:	3ff00000 	.word	0x3ff00000
 80013b8:	20000110 	.word	0x20000110
 80013bc:	43fa0000 	.word	0x43fa0000
 80013c0:	20000004 	.word	0x20000004
 80013c4:	08004600 	.word	0x08004600
 80013c8:	200000d4 	.word	0x200000d4
 80013cc:	200000fc 	.word	0x200000fc
 80013d0:	40020000 	.word	0x40020000
 80013d4:	200000f8 	.word	0x200000f8
				break;
 80013d8:	bf00      	nop
		}
					if(HAL_GetTick()-TimeStamp>=LED_DELAY && LED == 1)
 80013da:	f000 fba3 	bl	8001b24 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	4b26      	ldr	r3, [pc, #152]	; (800147c <main+0x6b8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <main+0x6bc>)
 80013f0:	edd3 7a00 	vldr	s15, [r3]
 80013f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fc:	db0c      	blt.n	8001418 <main+0x654>
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <main+0x6c0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d108      	bne.n	8001418 <main+0x654>
								{
									TimeStamp=HAL_GetTick();
 8001406:	f000 fb8d 	bl	8001b24 <HAL_GetTick>
 800140a:	4603      	mov	r3, r0
 800140c:	4a1b      	ldr	r2, [pc, #108]	; (800147c <main+0x6b8>)
 800140e:	6013      	str	r3, [r2, #0]
									HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001410:	2120      	movs	r1, #32
 8001412:	481d      	ldr	r0, [pc, #116]	; (8001488 <main+0x6c4>)
 8001414:	f000 feeb 	bl	80021ee <HAL_GPIO_TogglePin>
								}
					if(inputchar>0 && inputchar!= 'a' && inputchar!= 's' && inputchar != 'd' && inputchar!= 'x' && inputchar!= '1'&& inputchar!='0')
 8001418:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 800141c:	2b00      	cmp	r3, #0
 800141e:	f77f ad36 	ble.w	8000e8e <main+0xca>
 8001422:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8001426:	2b61      	cmp	r3, #97	; 0x61
 8001428:	f43f ad31 	beq.w	8000e8e <main+0xca>
 800142c:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8001430:	2b73      	cmp	r3, #115	; 0x73
 8001432:	f43f ad2c 	beq.w	8000e8e <main+0xca>
 8001436:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	f43f ad27 	beq.w	8000e8e <main+0xca>
 8001440:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8001444:	2b78      	cmp	r3, #120	; 0x78
 8001446:	f43f ad22 	beq.w	8000e8e <main+0xca>
 800144a:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 800144e:	2b31      	cmp	r3, #49	; 0x31
 8001450:	f43f ad1d 	beq.w	8000e8e <main+0xca>
 8001454:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8001458:	2b30      	cmp	r3, #48	; 0x30
 800145a:	f43f ad18 	beq.w	8000e8e <main+0xca>
					{
						HAL_UART_Transmit(&huart2, (u_int8_t*)Error, strlen(Error), 10);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4618      	mov	r0, r3
 8001464:	f7fe febc 	bl	80001e0 <strlen>
 8001468:	4603      	mov	r3, r0
 800146a:	b29a      	uxth	r2, r3
 800146c:	f107 011c 	add.w	r1, r7, #28
 8001470:	230a      	movs	r3, #10
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <main+0x6c8>)
 8001474:	f001 fe33 	bl	80030de <HAL_UART_Transmit>
	{
 8001478:	e509      	b.n	8000e8e <main+0xca>
 800147a:	bf00      	nop
 800147c:	200000f0 	.word	0x200000f0
 8001480:	20000004 	.word	0x20000004
 8001484:	200000fc 	.word	0x200000fc
 8001488:	40020000 	.word	0x40020000
 800148c:	2000015c 	.word	0x2000015c

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b094      	sub	sp, #80	; 0x50
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	2230      	movs	r2, #48	; 0x30
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 fc70 	bl	8003d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	4b28      	ldr	r3, [pc, #160]	; (800155c <SystemClock_Config+0xcc>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	4a27      	ldr	r2, [pc, #156]	; (800155c <SystemClock_Config+0xcc>)
 80014be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c2:	6413      	str	r3, [r2, #64]	; 0x40
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <SystemClock_Config+0xcc>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d0:	2300      	movs	r3, #0
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <SystemClock_Config+0xd0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a21      	ldr	r2, [pc, #132]	; (8001560 <SystemClock_Config+0xd0>)
 80014da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <SystemClock_Config+0xd0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ec:	2302      	movs	r3, #2
 80014ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f4:	2310      	movs	r3, #16
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f8:	2302      	movs	r3, #2
 80014fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014fc:	2300      	movs	r3, #0
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001500:	2310      	movs	r3, #16
 8001502:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001504:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001508:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800150a:	2304      	movs	r3, #4
 800150c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800150e:	2304      	movs	r3, #4
 8001510:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001512:	f107 0320 	add.w	r3, r7, #32
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fe84 	bl	8002224 <HAL_RCC_OscConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001522:	f000 f955 	bl	80017d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	230f      	movs	r3, #15
 8001528:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152a:	2302      	movs	r3, #2
 800152c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	2102      	movs	r1, #2
 8001542:	4618      	mov	r0, r3
 8001544:	f001 f8e6 	bl	8002714 <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800154e:	f000 f93f 	bl	80017d0 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3750      	adds	r7, #80	; 0x50
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40007000 	.word	0x40007000

08001564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_TIM2_Init+0x94>)
 8001582:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001586:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_TIM2_Init+0x94>)
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_TIM2_Init+0x94>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_TIM2_Init+0x94>)
 8001596:	f04f 32ff 	mov.w	r2, #4294967295
 800159a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_TIM2_Init+0x94>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <MX_TIM2_Init+0x94>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a8:	4813      	ldr	r0, [pc, #76]	; (80015f8 <MX_TIM2_Init+0x94>)
 80015aa:	f001 faaf 	bl	8002b0c <HAL_TIM_Base_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015b4:	f000 f90c 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	4619      	mov	r1, r3
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <MX_TIM2_Init+0x94>)
 80015c6:	f001 faf0 	bl	8002baa <HAL_TIM_ConfigClockSource>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015d0:	f000 f8fe 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d4:	2300      	movs	r3, #0
 80015d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_TIM2_Init+0x94>)
 80015e2:	f001 fcc1 	bl	8002f68 <HAL_TIMEx_MasterConfigSynchronization>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015ec:	f000 f8f0 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000114 	.word	0x20000114

080015fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <MX_USART2_UART_Init+0x50>)
 8001604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800160c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001622:	220c      	movs	r2, #12
 8001624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_USART2_UART_Init+0x4c>)
 8001634:	f001 fd06 	bl	8003044 <HAL_UART_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800163e:	f000 f8c7 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000015c 	.word	0x2000015c
 800164c:	40004400 	.word	0x40004400

08001650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <MX_GPIO_Init+0xd0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a2c      	ldr	r2, [pc, #176]	; (8001720 <MX_GPIO_Init+0xd0>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <MX_GPIO_Init+0xd0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <MX_GPIO_Init+0xd0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a25      	ldr	r2, [pc, #148]	; (8001720 <MX_GPIO_Init+0xd0>)
 800168c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <MX_GPIO_Init+0xd0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <MX_GPIO_Init+0xd0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a1e      	ldr	r2, [pc, #120]	; (8001720 <MX_GPIO_Init+0xd0>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <MX_GPIO_Init+0xd0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MX_GPIO_Init+0xd0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a17      	ldr	r2, [pc, #92]	; (8001720 <MX_GPIO_Init+0xd0>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MX_GPIO_Init+0xd0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2120      	movs	r1, #32
 80016da:	4812      	ldr	r0, [pc, #72]	; (8001724 <MX_GPIO_Init+0xd4>)
 80016dc:	f000 fd6e 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <MX_GPIO_Init+0xd8>)
 80016e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	480d      	ldr	r0, [pc, #52]	; (800172c <MX_GPIO_Init+0xdc>)
 80016f6:	f000 fbc5 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016fa:	2320      	movs	r3, #32
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <MX_GPIO_Init+0xd4>)
 8001712:	f000 fbb7 	bl	8001e84 <HAL_GPIO_Init>

}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000
 8001728:	10210000 	.word	0x10210000
 800172c:	40020800 	.word	0x40020800

08001730 <UARTRecieveIT>:

/* USER CODE BEGIN 4 */
int16_t UARTRecieveIT()
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8001736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800173a:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <UARTRecieveIT+0x54>)
 800173e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001740:	461a      	mov	r2, r3
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <UARTRecieveIT+0x54>)
 8001744:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001746:	b29b      	uxth	r3, r3
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <UARTRecieveIT+0x58>)
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	4293      	cmp	r3, r2
 8001750:	d010      	beq.n	8001774 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <UARTRecieveIT+0x58>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a0d      	ldr	r2, [pc, #52]	; (800178c <UARTRecieveIT+0x5c>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <UARTRecieveIT+0x58>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	4a08      	ldr	r2, [pc, #32]	; (8001784 <UARTRecieveIT+0x54>)
 8001764:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001766:	fbb3 f1f2 	udiv	r1, r3, r2
 800176a:	fb02 f201 	mul.w	r2, r2, r1
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	4a05      	ldr	r2, [pc, #20]	; (8001788 <UARTRecieveIT+0x58>)
 8001772:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	2000015c 	.word	0x2000015c
 8001788:	20000100 	.word	0x20000100
 800178c:	200000b4 	.word	0x200000b4

08001790 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 8001798:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <HAL_UART_RxCpltCallback+0x30>)
 800179a:	490a      	ldr	r1, [pc, #40]	; (80017c4 <HAL_UART_RxCpltCallback+0x34>)
 800179c:	480a      	ldr	r0, [pc, #40]	; (80017c8 <HAL_UART_RxCpltCallback+0x38>)
 800179e:	f002 faf9 	bl	8003d94 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80017a2:	4809      	ldr	r0, [pc, #36]	; (80017c8 <HAL_UART_RxCpltCallback+0x38>)
 80017a4:	f7fe fd1c 	bl	80001e0 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b0:	4905      	ldr	r1, [pc, #20]	; (80017c8 <HAL_UART_RxCpltCallback+0x38>)
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <HAL_UART_RxCpltCallback+0x3c>)
 80017b4:	f001 fc93 	bl	80030de <HAL_UART_Transmit>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200000b4 	.word	0x200000b4
 80017c4:	08004734 	.word	0x08004734
 80017c8:	20000094 	.word	0x20000094
 80017cc:	2000015c 	.word	0x2000015c

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80017d8:	e7fe      	b.n	80017d8 <Error_Handler+0x8>
	...

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_MspInit+0x4c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_MspInit+0x4c>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_MspInit+0x4c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_MspInit+0x4c>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_MspInit+0x4c>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_MspInit+0x4c>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800181a:	2007      	movs	r0, #7
 800181c:	f000 fa5e 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183c:	d10d      	bne.n	800185a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_TIM_Base_MspInit+0x3c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <HAL_TIM_Base_MspInit+0x3c>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_TIM_Base_MspInit+0x3c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <HAL_UART_MspInit+0x94>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d133      	bne.n	80018f6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <HAL_UART_MspInit+0x98>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a1b      	ldr	r2, [pc, #108]	; (8001904 <HAL_UART_MspInit+0x98>)
 8001898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_UART_MspInit+0x98>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_UART_MspInit+0x98>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a14      	ldr	r2, [pc, #80]	; (8001904 <HAL_UART_MspInit+0x98>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_UART_MspInit+0x98>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018c6:	230c      	movs	r3, #12
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018d6:	2307      	movs	r3, #7
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <HAL_UART_MspInit+0x9c>)
 80018e2:	f000 facf 	bl	8001e84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	2026      	movs	r0, #38	; 0x26
 80018ec:	f000 fa01 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018f0:	2026      	movs	r0, #38	; 0x26
 80018f2:	f000 fa1a 	bl	8001d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40004400 	.word	0x40004400
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <NMI_Handler+0x4>

08001912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <MemManage_Handler+0x4>

0800191e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <UsageFault_Handler+0x4>

0800192a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001958:	f000 f8d0 	bl	8001afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <USART2_IRQHandler+0x10>)
 8001966:	f001 fc7d 	bl	8003264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000015c 	.word	0x2000015c

08001974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800197c:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <_sbrk+0x5c>)
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <_sbrk+0x60>)
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <_sbrk+0x64>)
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <_sbrk+0x68>)
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d207      	bcs.n	80019b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a4:	f002 f9b6 	bl	8003d14 <__errno>
 80019a8:	4603      	mov	r3, r0
 80019aa:	220c      	movs	r2, #12
 80019ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	e009      	b.n	80019c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <_sbrk+0x64>)
 80019c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c6:	68fb      	ldr	r3, [r7, #12]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20020000 	.word	0x20020000
 80019d4:	00000400 	.word	0x00000400
 80019d8:	20000104 	.word	0x20000104
 80019dc:	200001b8 	.word	0x200001b8

080019e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <SystemInit+0x20>)
 80019e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <SystemInit+0x20>)
 80019ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a08:	480d      	ldr	r0, [pc, #52]	; (8001a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a0a:	490e      	ldr	r1, [pc, #56]	; (8001a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a20:	4c0b      	ldr	r4, [pc, #44]	; (8001a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a2e:	f7ff ffd7 	bl	80019e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a32:	f002 f975 	bl	8003d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a36:	f7ff f9c5 	bl	8000dc4 <main>
  bx  lr    
 8001a3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a44:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001a48:	080047a0 	.word	0x080047a0
  ldr r2, =_sbss
 8001a4c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001a50:	200001b8 	.word	0x200001b8

08001a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a54:	e7fe      	b.n	8001a54 <ADC_IRQHandler>
	...

08001a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_Init+0x40>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <HAL_Init+0x40>)
 8001a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_Init+0x40>)
 8001a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <HAL_Init+0x40>)
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a80:	2003      	movs	r0, #3
 8001a82:	f000 f92b 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f000 f808 	bl	8001a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a8c:	f7ff fea6 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023c00 	.word	0x40023c00

08001a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_InitTick+0x54>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_InitTick+0x58>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f943 	bl	8001d46 <HAL_SYSTICK_Config>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00e      	b.n	8001ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d80a      	bhi.n	8001ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f000 f90b 	bl	8001cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001adc:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <HAL_InitTick+0x5c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000008 	.word	0x20000008
 8001af4:	20000010 	.word	0x20000010
 8001af8:	2000000c 	.word	0x2000000c

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x24>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_IncTick+0x24>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000010 	.word	0x20000010
 8001b20:	200001a4 	.word	0x200001a4

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	200001a4 	.word	0x200001a4

08001b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <__NVIC_GetPriorityGrouping+0x18>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0307 	and.w	r3, r3, #7
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db0b      	blt.n	8001bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	4907      	ldr	r1, [pc, #28]	; (8001bd8 <__NVIC_EnableIRQ+0x38>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000e100 	.word	0xe000e100

08001bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db0a      	blt.n	8001c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	490c      	ldr	r1, [pc, #48]	; (8001c28 <__NVIC_SetPriority+0x4c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c04:	e00a      	b.n	8001c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4908      	ldr	r1, [pc, #32]	; (8001c2c <__NVIC_SetPriority+0x50>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	440b      	add	r3, r1
 8001c1a:	761a      	strb	r2, [r3, #24]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f1c3 0307 	rsb	r3, r3, #7
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf28      	it	cs
 8001c4e:	2304      	movcs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d902      	bls.n	8001c60 <NVIC_EncodePriority+0x30>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b03      	subs	r3, #3
 8001c5e:	e000      	b.n	8001c62 <NVIC_EncodePriority+0x32>
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca8:	d301      	bcc.n	8001cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00f      	b.n	8001cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <SysTick_Config+0x40>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f7ff ff8e 	bl	8001bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc8:	2207      	movs	r2, #7
 8001cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff29 	bl	8001b3c <__NVIC_SetPriorityGrouping>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d04:	f7ff ff3e 	bl	8001b84 <__NVIC_GetPriorityGrouping>
 8001d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff8e 	bl	8001c30 <NVIC_EncodePriority>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff5d 	bl	8001bdc <__NVIC_SetPriority>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff31 	bl	8001ba0 <__NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffa2 	bl	8001c98 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff feda 	bl	8001b24 <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d008      	beq.n	8001d90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e052      	b.n	8001e36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0216 	bic.w	r2, r2, #22
 8001d9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d103      	bne.n	8001dc0 <HAL_DMA_Abort+0x62>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0208 	bic.w	r2, r2, #8
 8001dce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de0:	e013      	b.n	8001e0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de2:	f7ff fe9f 	bl	8001b24 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d90c      	bls.n	8001e0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2220      	movs	r2, #32
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2203      	movs	r2, #3
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e015      	b.n	8001e36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e4      	bne.n	8001de2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	223f      	movs	r2, #63	; 0x3f
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d004      	beq.n	8001e5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2280      	movs	r2, #128	; 0x80
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e00c      	b.n	8001e76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2205      	movs	r2, #5
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	e159      	b.n	8002154 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	f040 8148 	bne.w	800214e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d005      	beq.n	8001ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d130      	bne.n	8001f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 0201 	and.w	r2, r3, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d017      	beq.n	8001f74 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d123      	bne.n	8001fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	69b9      	ldr	r1, [r7, #24]
 8001fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0203 	and.w	r2, r3, #3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80a2 	beq.w	800214e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b57      	ldr	r3, [pc, #348]	; (800216c <HAL_GPIO_Init+0x2e8>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	4a56      	ldr	r2, [pc, #344]	; (800216c <HAL_GPIO_Init+0x2e8>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002018:	6453      	str	r3, [r2, #68]	; 0x44
 800201a:	4b54      	ldr	r3, [pc, #336]	; (800216c <HAL_GPIO_Init+0x2e8>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002026:	4a52      	ldr	r2, [pc, #328]	; (8002170 <HAL_GPIO_Init+0x2ec>)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	220f      	movs	r2, #15
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a49      	ldr	r2, [pc, #292]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x202>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a48      	ldr	r2, [pc, #288]	; (8002178 <HAL_GPIO_Init+0x2f4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x1fe>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a47      	ldr	r2, [pc, #284]	; (800217c <HAL_GPIO_Init+0x2f8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x1fa>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a46      	ldr	r2, [pc, #280]	; (8002180 <HAL_GPIO_Init+0x2fc>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x1f6>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a45      	ldr	r2, [pc, #276]	; (8002184 <HAL_GPIO_Init+0x300>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x1f2>
 8002072:	2304      	movs	r3, #4
 8002074:	e008      	b.n	8002088 <HAL_GPIO_Init+0x204>
 8002076:	2307      	movs	r3, #7
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x204>
 800207a:	2303      	movs	r3, #3
 800207c:	e004      	b.n	8002088 <HAL_GPIO_Init+0x204>
 800207e:	2302      	movs	r3, #2
 8002080:	e002      	b.n	8002088 <HAL_GPIO_Init+0x204>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_GPIO_Init+0x204>
 8002086:	2300      	movs	r3, #0
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	f002 0203 	and.w	r2, r2, #3
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	4093      	lsls	r3, r2
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002098:	4935      	ldr	r1, [pc, #212]	; (8002170 <HAL_GPIO_Init+0x2ec>)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	3302      	adds	r3, #2
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a6:	4b38      	ldr	r3, [pc, #224]	; (8002188 <HAL_GPIO_Init+0x304>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ca:	4a2f      	ldr	r2, [pc, #188]	; (8002188 <HAL_GPIO_Init+0x304>)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020d0:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <HAL_GPIO_Init+0x304>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f4:	4a24      	ldr	r2, [pc, #144]	; (8002188 <HAL_GPIO_Init+0x304>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fa:	4b23      	ldr	r3, [pc, #140]	; (8002188 <HAL_GPIO_Init+0x304>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211e:	4a1a      	ldr	r2, [pc, #104]	; (8002188 <HAL_GPIO_Init+0x304>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_GPIO_Init+0x304>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002148:	4a0f      	ldr	r2, [pc, #60]	; (8002188 <HAL_GPIO_Init+0x304>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3301      	adds	r3, #1
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	2b0f      	cmp	r3, #15
 8002158:	f67f aea2 	bls.w	8001ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3724      	adds	r7, #36	; 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800
 8002170:	40013800 	.word	0x40013800
 8002174:	40020000 	.word	0x40020000
 8002178:	40020400 	.word	0x40020400
 800217c:	40020800 	.word	0x40020800
 8002180:	40020c00 	.word	0x40020c00
 8002184:	40021000 	.word	0x40021000
 8002188:	40013c00 	.word	0x40013c00

0800218c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	887b      	ldrh	r3, [r7, #2]
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	e001      	b.n	80021ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
 80021c8:	4613      	mov	r3, r2
 80021ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021cc:	787b      	ldrb	r3, [r7, #1]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d2:	887a      	ldrh	r2, [r7, #2]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021d8:	e003      	b.n	80021e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021da:	887b      	ldrh	r3, [r7, #2]
 80021dc:	041a      	lsls	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	619a      	str	r2, [r3, #24]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b085      	sub	sp, #20
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002200:	887a      	ldrh	r2, [r7, #2]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4013      	ands	r3, r2
 8002206:	041a      	lsls	r2, r3, #16
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	43d9      	mvns	r1, r3
 800220c:	887b      	ldrh	r3, [r7, #2]
 800220e:	400b      	ands	r3, r1
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	619a      	str	r2, [r3, #24]
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e264      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d075      	beq.n	800232e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002242:	4ba3      	ldr	r3, [pc, #652]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b04      	cmp	r3, #4
 800224c:	d00c      	beq.n	8002268 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224e:	4ba0      	ldr	r3, [pc, #640]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002256:	2b08      	cmp	r3, #8
 8002258:	d112      	bne.n	8002280 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225a:	4b9d      	ldr	r3, [pc, #628]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002266:	d10b      	bne.n	8002280 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	4b99      	ldr	r3, [pc, #612]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d05b      	beq.n	800232c <HAL_RCC_OscConfig+0x108>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d157      	bne.n	800232c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e23f      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d106      	bne.n	8002298 <HAL_RCC_OscConfig+0x74>
 800228a:	4b91      	ldr	r3, [pc, #580]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a90      	ldr	r2, [pc, #576]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e01d      	b.n	80022d4 <HAL_RCC_OscConfig+0xb0>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x98>
 80022a2:	4b8b      	ldr	r3, [pc, #556]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a8a      	ldr	r2, [pc, #552]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b88      	ldr	r3, [pc, #544]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a87      	ldr	r2, [pc, #540]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0xb0>
 80022bc:	4b84      	ldr	r3, [pc, #528]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a83      	ldr	r2, [pc, #524]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b81      	ldr	r3, [pc, #516]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a80      	ldr	r2, [pc, #512]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff fc22 	bl	8001b24 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e4:	f7ff fc1e 	bl	8001b24 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e204      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0xc0>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff fc0e 	bl	8001b24 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff fc0a 	bl	8001b24 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1f0      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	4b6c      	ldr	r3, [pc, #432]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0xe8>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d063      	beq.n	8002402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800233a:	4b65      	ldr	r3, [pc, #404]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002346:	4b62      	ldr	r3, [pc, #392]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800234e:	2b08      	cmp	r3, #8
 8002350:	d11c      	bne.n	800238c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002352:	4b5f      	ldr	r3, [pc, #380]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	4b5c      	ldr	r3, [pc, #368]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x152>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e1c4      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4952      	ldr	r1, [pc, #328]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	e03a      	b.n	8002402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002394:	4b4f      	ldr	r3, [pc, #316]	; (80024d4 <HAL_RCC_OscConfig+0x2b0>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7ff fbc3 	bl	8001b24 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a2:	f7ff fbbf 	bl	8001b24 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e1a5      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	4b46      	ldr	r3, [pc, #280]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4940      	ldr	r1, [pc, #256]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d6:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <HAL_RCC_OscConfig+0x2b0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7ff fba2 	bl	8001b24 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e4:	f7ff fb9e 	bl	8001b24 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e184      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d030      	beq.n	8002470 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <HAL_RCC_OscConfig+0x2b4>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7ff fb82 	bl	8001b24 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002424:	f7ff fb7e 	bl	8001b24 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e164      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x200>
 8002442:	e015      	b.n	8002470 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCC_OscConfig+0x2b4>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7ff fb6b 	bl	8001b24 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002452:	f7ff fb67 	bl	8001b24 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e14d      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a0 	beq.w	80025be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10f      	bne.n	80024ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249c:	6413      	str	r3, [r2, #64]	; 0x40
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_OscConfig+0x2b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d121      	bne.n	80024fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_RCC_OscConfig+0x2b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a07      	ldr	r2, [pc, #28]	; (80024dc <HAL_RCC_OscConfig+0x2b8>)
 80024c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c6:	f7ff fb2d 	bl	8001b24 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024cc:	e011      	b.n	80024f2 <HAL_RCC_OscConfig+0x2ce>
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	42470000 	.word	0x42470000
 80024d8:	42470e80 	.word	0x42470e80
 80024dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7ff fb20 	bl	8001b24 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e106      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b85      	ldr	r3, [pc, #532]	; (8002708 <HAL_RCC_OscConfig+0x4e4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d106      	bne.n	8002514 <HAL_RCC_OscConfig+0x2f0>
 8002506:	4b81      	ldr	r3, [pc, #516]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	4a80      	ldr	r2, [pc, #512]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6713      	str	r3, [r2, #112]	; 0x70
 8002512:	e01c      	b.n	800254e <HAL_RCC_OscConfig+0x32a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b05      	cmp	r3, #5
 800251a:	d10c      	bne.n	8002536 <HAL_RCC_OscConfig+0x312>
 800251c:	4b7b      	ldr	r3, [pc, #492]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002520:	4a7a      	ldr	r2, [pc, #488]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6713      	str	r3, [r2, #112]	; 0x70
 8002528:	4b78      	ldr	r3, [pc, #480]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4a77      	ldr	r2, [pc, #476]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6713      	str	r3, [r2, #112]	; 0x70
 8002534:	e00b      	b.n	800254e <HAL_RCC_OscConfig+0x32a>
 8002536:	4b75      	ldr	r3, [pc, #468]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a74      	ldr	r2, [pc, #464]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	4b72      	ldr	r3, [pc, #456]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	4a71      	ldr	r2, [pc, #452]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d015      	beq.n	8002582 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002556:	f7ff fae5 	bl	8001b24 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7ff fae1 	bl	8001b24 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0c5      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	4b65      	ldr	r3, [pc, #404]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ee      	beq.n	800255e <HAL_RCC_OscConfig+0x33a>
 8002580:	e014      	b.n	80025ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7ff facf 	bl	8001b24 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7ff facb 	bl	8001b24 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	; 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e0af      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	4b5a      	ldr	r3, [pc, #360]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ee      	bne.n	800258a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d105      	bne.n	80025be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b2:	4b56      	ldr	r3, [pc, #344]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	4a55      	ldr	r2, [pc, #340]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 809b 	beq.w	80026fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025c8:	4b50      	ldr	r3, [pc, #320]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d05c      	beq.n	800268e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d141      	bne.n	8002660 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025dc:	4b4c      	ldr	r3, [pc, #304]	; (8002710 <HAL_RCC_OscConfig+0x4ec>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7ff fa9f 	bl	8001b24 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ea:	f7ff fa9b 	bl	8001b24 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e081      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fc:	4b43      	ldr	r3, [pc, #268]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	019b      	lsls	r3, r3, #6
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	3b01      	subs	r3, #1
 8002622:	041b      	lsls	r3, r3, #16
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	061b      	lsls	r3, r3, #24
 800262c:	4937      	ldr	r1, [pc, #220]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002632:	4b37      	ldr	r3, [pc, #220]	; (8002710 <HAL_RCC_OscConfig+0x4ec>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7ff fa74 	bl	8001b24 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002640:	f7ff fa70 	bl	8001b24 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e056      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	4b2e      	ldr	r3, [pc, #184]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x41c>
 800265e:	e04e      	b.n	80026fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002660:	4b2b      	ldr	r3, [pc, #172]	; (8002710 <HAL_RCC_OscConfig+0x4ec>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7ff fa5d 	bl	8001b24 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266e:	f7ff fa59 	bl	8001b24 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e03f      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002680:	4b22      	ldr	r3, [pc, #136]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x44a>
 800268c:	e037      	b.n	80026fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e032      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800269a:	4b1c      	ldr	r3, [pc, #112]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d028      	beq.n	80026fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d121      	bne.n	80026fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d11a      	bne.n	80026fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026ca:	4013      	ands	r3, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d111      	bne.n	80026fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40007000 	.word	0x40007000
 800270c:	40023800 	.word	0x40023800
 8002710:	42470060 	.word	0x42470060

08002714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0cc      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b68      	ldr	r3, [pc, #416]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d90c      	bls.n	8002750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b65      	ldr	r3, [pc, #404]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b63      	ldr	r3, [pc, #396]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0b8      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002768:	4b59      	ldr	r3, [pc, #356]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4a58      	ldr	r2, [pc, #352]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002780:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800278a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800278c:	4b50      	ldr	r3, [pc, #320]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	494d      	ldr	r1, [pc, #308]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d044      	beq.n	8002834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b47      	ldr	r3, [pc, #284]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d119      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e07f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d003      	beq.n	80027d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e06f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e2:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e067      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f2:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4934      	ldr	r1, [pc, #208]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002804:	f7ff f98e 	bl	8001b24 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7ff f98a 	bl	8001b24 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e04f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	429a      	cmp	r2, r3
 8002832:	d1eb      	bne.n	800280c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002834:	4b25      	ldr	r3, [pc, #148]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d20c      	bcs.n	800285c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b22      	ldr	r3, [pc, #136]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e032      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4916      	ldr	r1, [pc, #88]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	490e      	ldr	r1, [pc, #56]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800289a:	f000 f821 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	490a      	ldr	r1, [pc, #40]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	5ccb      	ldrb	r3, [r1, r3]
 80028ae:	fa22 f303 	lsr.w	r3, r2, r3
 80028b2:	4a09      	ldr	r2, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff f8ee 	bl	8001a9c <HAL_InitTick>

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023c00 	.word	0x40023c00
 80028d0:	40023800 	.word	0x40023800
 80028d4:	08004744 	.word	0x08004744
 80028d8:	20000008 	.word	0x20000008
 80028dc:	2000000c 	.word	0x2000000c

080028e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	2300      	movs	r3, #0
 80028f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f8:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b08      	cmp	r3, #8
 8002902:	d00d      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x40>
 8002904:	2b08      	cmp	r3, #8
 8002906:	f200 80bd 	bhi.w	8002a84 <HAL_RCC_GetSysClockFreq+0x1a4>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x34>
 800290e:	2b04      	cmp	r3, #4
 8002910:	d003      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x3a>
 8002912:	e0b7      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4b61      	ldr	r3, [pc, #388]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002916:	60bb      	str	r3, [r7, #8]
       break;
 8002918:	e0b7      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800291a:	4b61      	ldr	r3, [pc, #388]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800291c:	60bb      	str	r3, [r7, #8]
      break;
 800291e:	e0b4      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002920:	4b5d      	ldr	r3, [pc, #372]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002928:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800292a:	4b5b      	ldr	r3, [pc, #364]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d04d      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002936:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	099b      	lsrs	r3, r3, #6
 800293c:	461a      	mov	r2, r3
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002946:	f04f 0100 	mov.w	r1, #0
 800294a:	ea02 0800 	and.w	r8, r2, r0
 800294e:	ea03 0901 	and.w	r9, r3, r1
 8002952:	4640      	mov	r0, r8
 8002954:	4649      	mov	r1, r9
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	014b      	lsls	r3, r1, #5
 8002960:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002964:	0142      	lsls	r2, r0, #5
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	ebb0 0008 	subs.w	r0, r0, r8
 800296e:	eb61 0109 	sbc.w	r1, r1, r9
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	018b      	lsls	r3, r1, #6
 800297c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002980:	0182      	lsls	r2, r0, #6
 8002982:	1a12      	subs	r2, r2, r0
 8002984:	eb63 0301 	sbc.w	r3, r3, r1
 8002988:	f04f 0000 	mov.w	r0, #0
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	00d9      	lsls	r1, r3, #3
 8002992:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002996:	00d0      	lsls	r0, r2, #3
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	eb12 0208 	adds.w	r2, r2, r8
 80029a0:	eb43 0309 	adc.w	r3, r3, r9
 80029a4:	f04f 0000 	mov.w	r0, #0
 80029a8:	f04f 0100 	mov.w	r1, #0
 80029ac:	0259      	lsls	r1, r3, #9
 80029ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029b2:	0250      	lsls	r0, r2, #9
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	461a      	mov	r2, r3
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	f7fe f882 	bl	8000acc <__aeabi_uldivmod>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4613      	mov	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e04a      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d2:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	099b      	lsrs	r3, r3, #6
 80029d8:	461a      	mov	r2, r3
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029e2:	f04f 0100 	mov.w	r1, #0
 80029e6:	ea02 0400 	and.w	r4, r2, r0
 80029ea:	ea03 0501 	and.w	r5, r3, r1
 80029ee:	4620      	mov	r0, r4
 80029f0:	4629      	mov	r1, r5
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	014b      	lsls	r3, r1, #5
 80029fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a00:	0142      	lsls	r2, r0, #5
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	1b00      	subs	r0, r0, r4
 8002a08:	eb61 0105 	sbc.w	r1, r1, r5
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	018b      	lsls	r3, r1, #6
 8002a16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a1a:	0182      	lsls	r2, r0, #6
 8002a1c:	1a12      	subs	r2, r2, r0
 8002a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a22:	f04f 0000 	mov.w	r0, #0
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	00d9      	lsls	r1, r3, #3
 8002a2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a30:	00d0      	lsls	r0, r2, #3
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	1912      	adds	r2, r2, r4
 8002a38:	eb45 0303 	adc.w	r3, r5, r3
 8002a3c:	f04f 0000 	mov.w	r0, #0
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	0299      	lsls	r1, r3, #10
 8002a46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a4a:	0290      	lsls	r0, r2, #10
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	f7fe f836 	bl	8000acc <__aeabi_uldivmod>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4613      	mov	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	3301      	adds	r3, #1
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a80:	60bb      	str	r3, [r7, #8]
      break;
 8002a82:	e002      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a86:	60bb      	str	r3, [r7, #8]
      break;
 8002a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	00f42400 	.word	0x00f42400
 8002aa0:	007a1200 	.word	0x007a1200

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000008 	.word	0x20000008

08002abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ac0:	f7ff fff0 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	0a9b      	lsrs	r3, r3, #10
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	4903      	ldr	r1, [pc, #12]	; (8002ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad2:	5ccb      	ldrb	r3, [r1, r3]
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	08004754 	.word	0x08004754

08002ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ae8:	f7ff ffdc 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0b5b      	lsrs	r3, r3, #13
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4903      	ldr	r1, [pc, #12]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40023800 	.word	0x40023800
 8002b08:	08004754 	.word	0x08004754

08002b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e041      	b.n	8002ba2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe fe7a 	bl	800182c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3304      	adds	r3, #4
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	f000 f8f2 	bl	8002d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_TIM_ConfigClockSource+0x18>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e0b3      	b.n	8002d2a <HAL_TIM_ConfigClockSource+0x180>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002be0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002be8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfa:	d03e      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0xd0>
 8002bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c00:	f200 8087 	bhi.w	8002d12 <HAL_TIM_ConfigClockSource+0x168>
 8002c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c08:	f000 8085 	beq.w	8002d16 <HAL_TIM_ConfigClockSource+0x16c>
 8002c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c10:	d87f      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x168>
 8002c12:	2b70      	cmp	r3, #112	; 0x70
 8002c14:	d01a      	beq.n	8002c4c <HAL_TIM_ConfigClockSource+0xa2>
 8002c16:	2b70      	cmp	r3, #112	; 0x70
 8002c18:	d87b      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x168>
 8002c1a:	2b60      	cmp	r3, #96	; 0x60
 8002c1c:	d050      	beq.n	8002cc0 <HAL_TIM_ConfigClockSource+0x116>
 8002c1e:	2b60      	cmp	r3, #96	; 0x60
 8002c20:	d877      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x168>
 8002c22:	2b50      	cmp	r3, #80	; 0x50
 8002c24:	d03c      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0xf6>
 8002c26:	2b50      	cmp	r3, #80	; 0x50
 8002c28:	d873      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x168>
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d058      	beq.n	8002ce0 <HAL_TIM_ConfigClockSource+0x136>
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	d86f      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x168>
 8002c32:	2b30      	cmp	r3, #48	; 0x30
 8002c34:	d064      	beq.n	8002d00 <HAL_TIM_ConfigClockSource+0x156>
 8002c36:	2b30      	cmp	r3, #48	; 0x30
 8002c38:	d86b      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x168>
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d060      	beq.n	8002d00 <HAL_TIM_ConfigClockSource+0x156>
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d867      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x168>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d05c      	beq.n	8002d00 <HAL_TIM_ConfigClockSource+0x156>
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d05a      	beq.n	8002d00 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c4a:	e062      	b.n	8002d12 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	6899      	ldr	r1, [r3, #8]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f000 f964 	bl	8002f28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	609a      	str	r2, [r3, #8]
      break;
 8002c78:	e04e      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6899      	ldr	r1, [r3, #8]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f000 f94d 	bl	8002f28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c9c:	609a      	str	r2, [r3, #8]
      break;
 8002c9e:	e03b      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	461a      	mov	r2, r3
 8002cae:	f000 f8c1 	bl	8002e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2150      	movs	r1, #80	; 0x50
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 f91a 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 8002cbe:	e02b      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f000 f8e0 	bl	8002e92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2160      	movs	r1, #96	; 0x60
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 f90a 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 8002cde:	e01b      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	461a      	mov	r2, r3
 8002cee:	f000 f8a1 	bl	8002e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2140      	movs	r1, #64	; 0x40
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 f8fa 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 8002cfe:	e00b      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f000 f8f1 	bl	8002ef2 <TIM_ITRx_SetConfig>
        break;
 8002d10:	e002      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d12:	bf00      	nop
 8002d14:	e000      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a34      	ldr	r2, [pc, #208]	; (8002e18 <TIM_Base_SetConfig+0xe4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00f      	beq.n	8002d6c <TIM_Base_SetConfig+0x38>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d52:	d00b      	beq.n	8002d6c <TIM_Base_SetConfig+0x38>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a31      	ldr	r2, [pc, #196]	; (8002e1c <TIM_Base_SetConfig+0xe8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d007      	beq.n	8002d6c <TIM_Base_SetConfig+0x38>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a30      	ldr	r2, [pc, #192]	; (8002e20 <TIM_Base_SetConfig+0xec>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d003      	beq.n	8002d6c <TIM_Base_SetConfig+0x38>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a2f      	ldr	r2, [pc, #188]	; (8002e24 <TIM_Base_SetConfig+0xf0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d108      	bne.n	8002d7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a25      	ldr	r2, [pc, #148]	; (8002e18 <TIM_Base_SetConfig+0xe4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d01b      	beq.n	8002dbe <TIM_Base_SetConfig+0x8a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8c:	d017      	beq.n	8002dbe <TIM_Base_SetConfig+0x8a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a22      	ldr	r2, [pc, #136]	; (8002e1c <TIM_Base_SetConfig+0xe8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <TIM_Base_SetConfig+0x8a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a21      	ldr	r2, [pc, #132]	; (8002e20 <TIM_Base_SetConfig+0xec>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00f      	beq.n	8002dbe <TIM_Base_SetConfig+0x8a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a20      	ldr	r2, [pc, #128]	; (8002e24 <TIM_Base_SetConfig+0xf0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00b      	beq.n	8002dbe <TIM_Base_SetConfig+0x8a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a1f      	ldr	r2, [pc, #124]	; (8002e28 <TIM_Base_SetConfig+0xf4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <TIM_Base_SetConfig+0x8a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a1e      	ldr	r2, [pc, #120]	; (8002e2c <TIM_Base_SetConfig+0xf8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d003      	beq.n	8002dbe <TIM_Base_SetConfig+0x8a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <TIM_Base_SetConfig+0xfc>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d108      	bne.n	8002dd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a08      	ldr	r2, [pc, #32]	; (8002e18 <TIM_Base_SetConfig+0xe4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d103      	bne.n	8002e04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	615a      	str	r2, [r3, #20]
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	40000400 	.word	0x40000400
 8002e20:	40000800 	.word	0x40000800
 8002e24:	40000c00 	.word	0x40000c00
 8002e28:	40014000 	.word	0x40014000
 8002e2c:	40014400 	.word	0x40014400
 8002e30:	40014800 	.word	0x40014800

08002e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f023 0201 	bic.w	r2, r3, #1
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f023 030a 	bic.w	r3, r3, #10
 8002e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	621a      	str	r2, [r3, #32]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b087      	sub	sp, #28
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f023 0210 	bic.w	r2, r3, #16
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ebc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	031b      	lsls	r3, r3, #12
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ece:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	621a      	str	r2, [r3, #32]
}
 8002ee6:	bf00      	nop
 8002ee8:	371c      	adds	r7, #28
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f043 0307 	orr.w	r3, r3, #7
 8002f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	609a      	str	r2, [r3, #8]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	021a      	lsls	r2, r3, #8
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	609a      	str	r2, [r3, #8]
}
 8002f5c:	bf00      	nop
 8002f5e:	371c      	adds	r7, #28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e050      	b.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d018      	beq.n	8002ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fcc:	d013      	beq.n	8002ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00e      	beq.n	8002ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a16      	ldr	r2, [pc, #88]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d009      	beq.n	8002ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a15      	ldr	r2, [pc, #84]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d004      	beq.n	8002ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a13      	ldr	r2, [pc, #76]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d10c      	bne.n	8003010 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	4313      	orrs	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40010000 	.word	0x40010000
 8003034:	40000400 	.word	0x40000400
 8003038:	40000800 	.word	0x40000800
 800303c:	40000c00 	.word	0x40000c00
 8003040:	40014000 	.word	0x40014000

08003044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e03f      	b.n	80030d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fe fbfe 	bl	800186c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2224      	movs	r2, #36	; 0x24
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fc7b 	bl	8003984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800309c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b08a      	sub	sp, #40	; 0x28
 80030e2:	af02      	add	r7, sp, #8
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d17c      	bne.n	80031f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <HAL_UART_Transmit+0x2c>
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e075      	b.n	80031fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_UART_Transmit+0x3e>
 8003118:	2302      	movs	r3, #2
 800311a:	e06e      	b.n	80031fa <HAL_UART_Transmit+0x11c>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2221      	movs	r2, #33	; 0x21
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003132:	f7fe fcf7 	bl	8001b24 <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	88fa      	ldrh	r2, [r7, #6]
 8003142:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314c:	d108      	bne.n	8003160 <HAL_UART_Transmit+0x82>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d104      	bne.n	8003160 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	e003      	b.n	8003168 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003170:	e02a      	b.n	80031c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2200      	movs	r2, #0
 800317a:	2180      	movs	r1, #128	; 0x80
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fa3d 	bl	80035fc <UART_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e036      	b.n	80031fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10b      	bne.n	80031aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	3302      	adds	r3, #2
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	e007      	b.n	80031ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	3301      	adds	r3, #1
 80031b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1cf      	bne.n	8003172 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2200      	movs	r2, #0
 80031da:	2140      	movs	r1, #64	; 0x40
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fa0d 	bl	80035fc <UART_WaitOnFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e006      	b.n	80031fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e000      	b.n	80031fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031f8:	2302      	movs	r3, #2
  }
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3720      	adds	r7, #32
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	4613      	mov	r3, r2
 800320e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b20      	cmp	r3, #32
 800321a:	d11d      	bne.n	8003258 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <HAL_UART_Receive_IT+0x26>
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e016      	b.n	800325a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_UART_Receive_IT+0x38>
 8003236:	2302      	movs	r3, #2
 8003238:	e00f      	b.n	800325a <HAL_UART_Receive_IT+0x58>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	461a      	mov	r2, r3
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fa1e 	bl	8003690 <UART_Start_Receive_IT>
 8003254:	4603      	mov	r3, r0
 8003256:	e000      	b.n	800325a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10d      	bne.n	80032b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_UART_IRQHandler+0x52>
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 fad1 	bl	8003856 <UART_Receive_IT>
      return;
 80032b4:	e17c      	b.n	80035b0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80b1 	beq.w	8003420 <HAL_UART_IRQHandler+0x1bc>
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <HAL_UART_IRQHandler+0x70>
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80a6 	beq.w	8003420 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_UART_IRQHandler+0x90>
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_UART_IRQHandler+0xb0>
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f043 0202 	orr.w	r2, r3, #2
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_UART_IRQHandler+0xd0>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f043 0204 	orr.w	r2, r3, #4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00f      	beq.n	800335e <HAL_UART_IRQHandler+0xfa>
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d104      	bne.n	8003352 <HAL_UART_IRQHandler+0xee>
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f043 0208 	orr.w	r2, r3, #8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 811f 	beq.w	80035a6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_UART_IRQHandler+0x11e>
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fa6a 	bl	8003856 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <HAL_UART_IRQHandler+0x146>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d031      	beq.n	800340e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f9aa 	bl	8003704 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d123      	bne.n	8003406 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d013      	beq.n	80033fe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	4a77      	ldr	r2, [pc, #476]	; (80035b8 <HAL_UART_IRQHandler+0x354>)
 80033dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe fd2b 	bl	8001e3e <HAL_DMA_Abort_IT>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d016      	beq.n	800341c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033f8:	4610      	mov	r0, r2
 80033fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fc:	e00e      	b.n	800341c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f8e6 	bl	80035d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	e00a      	b.n	800341c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f8e2 	bl	80035d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340c:	e006      	b.n	800341c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f8de 	bl	80035d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800341a:	e0c4      	b.n	80035a6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341c:	bf00      	nop
    return;
 800341e:	e0c2      	b.n	80035a6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	2b01      	cmp	r3, #1
 8003426:	f040 80a2 	bne.w	800356e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 809c 	beq.w	800356e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8096 	beq.w	800356e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d14f      	bne.n	8003506 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003470:	8a3b      	ldrh	r3, [r7, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8099 	beq.w	80035aa <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800347c:	8a3a      	ldrh	r2, [r7, #16]
 800347e:	429a      	cmp	r2, r3
 8003480:	f080 8093 	bcs.w	80035aa <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	8a3a      	ldrh	r2, [r7, #16]
 8003488:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003494:	d02b      	beq.n	80034ee <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034a4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0210 	bic.w	r2, r2, #16
 80034e2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fe fc38 	bl	8001d5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	4619      	mov	r1, r3
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f870 	bl	80035e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003504:	e051      	b.n	80035aa <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800350e:	b29b      	uxth	r3, r3
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d047      	beq.n	80035ae <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800351e:	8a7b      	ldrh	r3, [r7, #18]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d044      	beq.n	80035ae <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003532:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0201 	bic.w	r2, r2, #1
 8003542:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0210 	bic.w	r2, r2, #16
 8003560:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003562:	8a7b      	ldrh	r3, [r7, #18]
 8003564:	4619      	mov	r1, r3
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f83c 	bl	80035e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800356c:	e01f      	b.n	80035ae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_UART_IRQHandler+0x326>
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8ff 	bl	8003786 <UART_Transmit_IT>
    return;
 8003588:	e012      	b.n	80035b0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00d      	beq.n	80035b0 <HAL_UART_IRQHandler+0x34c>
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d008      	beq.n	80035b0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f941 	bl	8003826 <UART_EndTransmit_IT>
    return;
 80035a4:	e004      	b.n	80035b0 <HAL_UART_IRQHandler+0x34c>
    return;
 80035a6:	bf00      	nop
 80035a8:	e002      	b.n	80035b0 <HAL_UART_IRQHandler+0x34c>
      return;
 80035aa:	bf00      	nop
 80035ac:	e000      	b.n	80035b0 <HAL_UART_IRQHandler+0x34c>
      return;
 80035ae:	bf00      	nop
  }
}
 80035b0:	3728      	adds	r7, #40	; 0x28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	0800375f 	.word	0x0800375f

080035bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360c:	e02c      	b.n	8003668 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d028      	beq.n	8003668 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d007      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x30>
 800361c:	f7fe fa82 	bl	8001b24 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	429a      	cmp	r2, r3
 800362a:	d21d      	bcs.n	8003668 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800363a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e00f      	b.n	8003688 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	4013      	ands	r3, r2
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	429a      	cmp	r2, r3
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	429a      	cmp	r2, r3
 8003684:	d0c3      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	88fa      	ldrh	r2, [r7, #6]
 80036a8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	88fa      	ldrh	r2, [r7, #6]
 80036ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2222      	movs	r2, #34	; 0x22
 80036ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0201 	orr.w	r2, r2, #1
 80036e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0220 	orr.w	r2, r2, #32
 80036f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800371a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	2b01      	cmp	r3, #1
 8003732:	d107      	bne.n	8003744 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0210 	bic.w	r2, r2, #16
 8003742:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f7ff ff29 	bl	80035d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b21      	cmp	r3, #33	; 0x21
 8003798:	d13e      	bne.n	8003818 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a2:	d114      	bne.n	80037ce <UART_Transmit_IT+0x48>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d110      	bne.n	80037ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	1c9a      	adds	r2, r3, #2
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	621a      	str	r2, [r3, #32]
 80037cc:	e008      	b.n	80037e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	1c59      	adds	r1, r3, #1
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6211      	str	r1, [r2, #32]
 80037d8:	781a      	ldrb	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4619      	mov	r1, r3
 80037ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10f      	bne.n	8003814 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003802:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003812:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff feb8 	bl	80035bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b22      	cmp	r3, #34	; 0x22
 8003868:	f040 8087 	bne.w	800397a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003874:	d117      	bne.n	80038a6 <UART_Receive_IT+0x50>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d113      	bne.n	80038a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	b29b      	uxth	r3, r3
 8003890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003894:	b29a      	uxth	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	1c9a      	adds	r2, r3, #2
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	629a      	str	r2, [r3, #40]	; 0x28
 80038a4:	e026      	b.n	80038f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b8:	d007      	beq.n	80038ca <UART_Receive_IT+0x74>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <UART_Receive_IT+0x82>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	e008      	b.n	80038ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4619      	mov	r1, r3
 8003902:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003904:	2b00      	cmp	r3, #0
 8003906:	d136      	bne.n	8003976 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0220 	bic.w	r2, r2, #32
 8003916:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003926:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	2b01      	cmp	r3, #1
 8003946:	d10e      	bne.n	8003966 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0210 	bic.w	r2, r2, #16
 8003956:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800395c:	4619      	mov	r1, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fe40 	bl	80035e4 <HAL_UARTEx_RxEventCallback>
 8003964:	e002      	b.n	800396c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd ff12 	bl	8001790 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e002      	b.n	800397c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003988:	b09f      	sub	sp, #124	; 0x7c
 800398a:	af00      	add	r7, sp, #0
 800398c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800398e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399a:	68d9      	ldr	r1, [r3, #12]
 800399c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	ea40 0301 	orr.w	r3, r0, r1
 80039a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	431a      	orrs	r2, r3
 80039b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80039be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039c8:	f021 010c 	bic.w	r1, r1, #12
 80039cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d2:	430b      	orrs	r3, r1
 80039d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e2:	6999      	ldr	r1, [r3, #24]
 80039e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	ea40 0301 	orr.w	r3, r0, r1
 80039ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4bc5      	ldr	r3, [pc, #788]	; (8003d08 <UART_SetConfig+0x384>)
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d004      	beq.n	8003a02 <UART_SetConfig+0x7e>
 80039f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4bc3      	ldr	r3, [pc, #780]	; (8003d0c <UART_SetConfig+0x388>)
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d103      	bne.n	8003a0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a02:	f7ff f86f 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8003a06:	6778      	str	r0, [r7, #116]	; 0x74
 8003a08:	e002      	b.n	8003a10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a0a:	f7ff f857 	bl	8002abc <HAL_RCC_GetPCLK1Freq>
 8003a0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a18:	f040 80b6 	bne.w	8003b88 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a1e:	461c      	mov	r4, r3
 8003a20:	f04f 0500 	mov.w	r5, #0
 8003a24:	4622      	mov	r2, r4
 8003a26:	462b      	mov	r3, r5
 8003a28:	1891      	adds	r1, r2, r2
 8003a2a:	6439      	str	r1, [r7, #64]	; 0x40
 8003a2c:	415b      	adcs	r3, r3
 8003a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a34:	1912      	adds	r2, r2, r4
 8003a36:	eb45 0303 	adc.w	r3, r5, r3
 8003a3a:	f04f 0000 	mov.w	r0, #0
 8003a3e:	f04f 0100 	mov.w	r1, #0
 8003a42:	00d9      	lsls	r1, r3, #3
 8003a44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a48:	00d0      	lsls	r0, r2, #3
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	1911      	adds	r1, r2, r4
 8003a50:	6639      	str	r1, [r7, #96]	; 0x60
 8003a52:	416b      	adcs	r3, r5
 8003a54:	667b      	str	r3, [r7, #100]	; 0x64
 8003a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	1891      	adds	r1, r2, r2
 8003a62:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a64:	415b      	adcs	r3, r3
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a70:	f7fd f82c 	bl	8000acc <__aeabi_uldivmod>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4ba5      	ldr	r3, [pc, #660]	; (8003d10 <UART_SetConfig+0x38c>)
 8003a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	011e      	lsls	r6, r3, #4
 8003a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a84:	461c      	mov	r4, r3
 8003a86:	f04f 0500 	mov.w	r5, #0
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	462b      	mov	r3, r5
 8003a8e:	1891      	adds	r1, r2, r2
 8003a90:	6339      	str	r1, [r7, #48]	; 0x30
 8003a92:	415b      	adcs	r3, r3
 8003a94:	637b      	str	r3, [r7, #52]	; 0x34
 8003a96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a9a:	1912      	adds	r2, r2, r4
 8003a9c:	eb45 0303 	adc.w	r3, r5, r3
 8003aa0:	f04f 0000 	mov.w	r0, #0
 8003aa4:	f04f 0100 	mov.w	r1, #0
 8003aa8:	00d9      	lsls	r1, r3, #3
 8003aaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aae:	00d0      	lsls	r0, r2, #3
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	1911      	adds	r1, r2, r4
 8003ab6:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ab8:	416b      	adcs	r3, r5
 8003aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	1891      	adds	r1, r2, r2
 8003ac8:	62b9      	str	r1, [r7, #40]	; 0x28
 8003aca:	415b      	adcs	r3, r3
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ace:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ad2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ad6:	f7fc fff9 	bl	8000acc <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4b8c      	ldr	r3, [pc, #560]	; (8003d10 <UART_SetConfig+0x38c>)
 8003ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	2164      	movs	r1, #100	; 0x64
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	3332      	adds	r3, #50	; 0x32
 8003af2:	4a87      	ldr	r2, [pc, #540]	; (8003d10 <UART_SetConfig+0x38c>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b00:	441e      	add	r6, r3
 8003b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b04:	4618      	mov	r0, r3
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	1894      	adds	r4, r2, r2
 8003b10:	623c      	str	r4, [r7, #32]
 8003b12:	415b      	adcs	r3, r3
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
 8003b16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b1a:	1812      	adds	r2, r2, r0
 8003b1c:	eb41 0303 	adc.w	r3, r1, r3
 8003b20:	f04f 0400 	mov.w	r4, #0
 8003b24:	f04f 0500 	mov.w	r5, #0
 8003b28:	00dd      	lsls	r5, r3, #3
 8003b2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b2e:	00d4      	lsls	r4, r2, #3
 8003b30:	4622      	mov	r2, r4
 8003b32:	462b      	mov	r3, r5
 8003b34:	1814      	adds	r4, r2, r0
 8003b36:	653c      	str	r4, [r7, #80]	; 0x50
 8003b38:	414b      	adcs	r3, r1
 8003b3a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	461a      	mov	r2, r3
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	1891      	adds	r1, r2, r2
 8003b48:	61b9      	str	r1, [r7, #24]
 8003b4a:	415b      	adcs	r3, r3
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b56:	f7fc ffb9 	bl	8000acc <__aeabi_uldivmod>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4b6c      	ldr	r3, [pc, #432]	; (8003d10 <UART_SetConfig+0x38c>)
 8003b60:	fba3 1302 	umull	r1, r3, r3, r2
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	2164      	movs	r1, #100	; 0x64
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	3332      	adds	r3, #50	; 0x32
 8003b72:	4a67      	ldr	r2, [pc, #412]	; (8003d10 <UART_SetConfig+0x38c>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	f003 0207 	and.w	r2, r3, #7
 8003b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4432      	add	r2, r6
 8003b84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b86:	e0b9      	b.n	8003cfc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8a:	461c      	mov	r4, r3
 8003b8c:	f04f 0500 	mov.w	r5, #0
 8003b90:	4622      	mov	r2, r4
 8003b92:	462b      	mov	r3, r5
 8003b94:	1891      	adds	r1, r2, r2
 8003b96:	6139      	str	r1, [r7, #16]
 8003b98:	415b      	adcs	r3, r3
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ba0:	1912      	adds	r2, r2, r4
 8003ba2:	eb45 0303 	adc.w	r3, r5, r3
 8003ba6:	f04f 0000 	mov.w	r0, #0
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	00d9      	lsls	r1, r3, #3
 8003bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bb4:	00d0      	lsls	r0, r2, #3
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	eb12 0804 	adds.w	r8, r2, r4
 8003bbe:	eb43 0905 	adc.w	r9, r3, r5
 8003bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f04f 0100 	mov.w	r1, #0
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	008b      	lsls	r3, r1, #2
 8003bd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bda:	0082      	lsls	r2, r0, #2
 8003bdc:	4640      	mov	r0, r8
 8003bde:	4649      	mov	r1, r9
 8003be0:	f7fc ff74 	bl	8000acc <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4b49      	ldr	r3, [pc, #292]	; (8003d10 <UART_SetConfig+0x38c>)
 8003bea:	fba3 2302 	umull	r2, r3, r3, r2
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	011e      	lsls	r6, r3, #4
 8003bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f04f 0100 	mov.w	r1, #0
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	1894      	adds	r4, r2, r2
 8003c00:	60bc      	str	r4, [r7, #8]
 8003c02:	415b      	adcs	r3, r3
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c0a:	1812      	adds	r2, r2, r0
 8003c0c:	eb41 0303 	adc.w	r3, r1, r3
 8003c10:	f04f 0400 	mov.w	r4, #0
 8003c14:	f04f 0500 	mov.w	r5, #0
 8003c18:	00dd      	lsls	r5, r3, #3
 8003c1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c1e:	00d4      	lsls	r4, r2, #3
 8003c20:	4622      	mov	r2, r4
 8003c22:	462b      	mov	r3, r5
 8003c24:	1814      	adds	r4, r2, r0
 8003c26:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c28:	414b      	adcs	r3, r1
 8003c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f04f 0100 	mov.w	r1, #0
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	008b      	lsls	r3, r1, #2
 8003c40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c44:	0082      	lsls	r2, r0, #2
 8003c46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c4a:	f7fc ff3f 	bl	8000acc <__aeabi_uldivmod>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4b2f      	ldr	r3, [pc, #188]	; (8003d10 <UART_SetConfig+0x38c>)
 8003c54:	fba3 1302 	umull	r1, r3, r3, r2
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	2164      	movs	r1, #100	; 0x64
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	3332      	adds	r3, #50	; 0x32
 8003c66:	4a2a      	ldr	r2, [pc, #168]	; (8003d10 <UART_SetConfig+0x38c>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c72:	441e      	add	r6, r3
 8003c74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c76:	4618      	mov	r0, r3
 8003c78:	f04f 0100 	mov.w	r1, #0
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	1894      	adds	r4, r2, r2
 8003c82:	603c      	str	r4, [r7, #0]
 8003c84:	415b      	adcs	r3, r3
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c8c:	1812      	adds	r2, r2, r0
 8003c8e:	eb41 0303 	adc.w	r3, r1, r3
 8003c92:	f04f 0400 	mov.w	r4, #0
 8003c96:	f04f 0500 	mov.w	r5, #0
 8003c9a:	00dd      	lsls	r5, r3, #3
 8003c9c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ca0:	00d4      	lsls	r4, r2, #3
 8003ca2:	4622      	mov	r2, r4
 8003ca4:	462b      	mov	r3, r5
 8003ca6:	eb12 0a00 	adds.w	sl, r2, r0
 8003caa:	eb43 0b01 	adc.w	fp, r3, r1
 8003cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	008b      	lsls	r3, r1, #2
 8003cc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cc6:	0082      	lsls	r2, r0, #2
 8003cc8:	4650      	mov	r0, sl
 8003cca:	4659      	mov	r1, fp
 8003ccc:	f7fc fefe 	bl	8000acc <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <UART_SetConfig+0x38c>)
 8003cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2164      	movs	r1, #100	; 0x64
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	3332      	adds	r3, #50	; 0x32
 8003ce8:	4a09      	ldr	r2, [pc, #36]	; (8003d10 <UART_SetConfig+0x38c>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	f003 020f 	and.w	r2, r3, #15
 8003cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4432      	add	r2, r6
 8003cfa:	609a      	str	r2, [r3, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	377c      	adds	r7, #124	; 0x7c
 8003d00:	46bd      	mov	sp, r7
 8003d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d06:	bf00      	nop
 8003d08:	40011000 	.word	0x40011000
 8003d0c:	40011400 	.word	0x40011400
 8003d10:	51eb851f 	.word	0x51eb851f

08003d14 <__errno>:
 8003d14:	4b01      	ldr	r3, [pc, #4]	; (8003d1c <__errno+0x8>)
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000014 	.word	0x20000014

08003d20 <__libc_init_array>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	4d0d      	ldr	r5, [pc, #52]	; (8003d58 <__libc_init_array+0x38>)
 8003d24:	4c0d      	ldr	r4, [pc, #52]	; (8003d5c <__libc_init_array+0x3c>)
 8003d26:	1b64      	subs	r4, r4, r5
 8003d28:	10a4      	asrs	r4, r4, #2
 8003d2a:	2600      	movs	r6, #0
 8003d2c:	42a6      	cmp	r6, r4
 8003d2e:	d109      	bne.n	8003d44 <__libc_init_array+0x24>
 8003d30:	4d0b      	ldr	r5, [pc, #44]	; (8003d60 <__libc_init_array+0x40>)
 8003d32:	4c0c      	ldr	r4, [pc, #48]	; (8003d64 <__libc_init_array+0x44>)
 8003d34:	f000 fc4e 	bl	80045d4 <_init>
 8003d38:	1b64      	subs	r4, r4, r5
 8003d3a:	10a4      	asrs	r4, r4, #2
 8003d3c:	2600      	movs	r6, #0
 8003d3e:	42a6      	cmp	r6, r4
 8003d40:	d105      	bne.n	8003d4e <__libc_init_array+0x2e>
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
 8003d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d48:	4798      	blx	r3
 8003d4a:	3601      	adds	r6, #1
 8003d4c:	e7ee      	b.n	8003d2c <__libc_init_array+0xc>
 8003d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d52:	4798      	blx	r3
 8003d54:	3601      	adds	r6, #1
 8003d56:	e7f2      	b.n	8003d3e <__libc_init_array+0x1e>
 8003d58:	08004798 	.word	0x08004798
 8003d5c:	08004798 	.word	0x08004798
 8003d60:	08004798 	.word	0x08004798
 8003d64:	0800479c 	.word	0x0800479c

08003d68 <memcpy>:
 8003d68:	440a      	add	r2, r1
 8003d6a:	4291      	cmp	r1, r2
 8003d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d70:	d100      	bne.n	8003d74 <memcpy+0xc>
 8003d72:	4770      	bx	lr
 8003d74:	b510      	push	{r4, lr}
 8003d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d7e:	4291      	cmp	r1, r2
 8003d80:	d1f9      	bne.n	8003d76 <memcpy+0xe>
 8003d82:	bd10      	pop	{r4, pc}

08003d84 <memset>:
 8003d84:	4402      	add	r2, r0
 8003d86:	4603      	mov	r3, r0
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d100      	bne.n	8003d8e <memset+0xa>
 8003d8c:	4770      	bx	lr
 8003d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d92:	e7f9      	b.n	8003d88 <memset+0x4>

08003d94 <siprintf>:
 8003d94:	b40e      	push	{r1, r2, r3}
 8003d96:	b500      	push	{lr}
 8003d98:	b09c      	sub	sp, #112	; 0x70
 8003d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d9c:	9002      	str	r0, [sp, #8]
 8003d9e:	9006      	str	r0, [sp, #24]
 8003da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003da4:	4809      	ldr	r0, [pc, #36]	; (8003dcc <siprintf+0x38>)
 8003da6:	9107      	str	r1, [sp, #28]
 8003da8:	9104      	str	r1, [sp, #16]
 8003daa:	4909      	ldr	r1, [pc, #36]	; (8003dd0 <siprintf+0x3c>)
 8003dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8003db0:	9105      	str	r1, [sp, #20]
 8003db2:	6800      	ldr	r0, [r0, #0]
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	a902      	add	r1, sp, #8
 8003db8:	f000 f868 	bl	8003e8c <_svfiprintf_r>
 8003dbc:	9b02      	ldr	r3, [sp, #8]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	b01c      	add	sp, #112	; 0x70
 8003dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dc8:	b003      	add	sp, #12
 8003dca:	4770      	bx	lr
 8003dcc:	20000014 	.word	0x20000014
 8003dd0:	ffff0208 	.word	0xffff0208

08003dd4 <__ssputs_r>:
 8003dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd8:	688e      	ldr	r6, [r1, #8]
 8003dda:	429e      	cmp	r6, r3
 8003ddc:	4682      	mov	sl, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	4690      	mov	r8, r2
 8003de2:	461f      	mov	r7, r3
 8003de4:	d838      	bhi.n	8003e58 <__ssputs_r+0x84>
 8003de6:	898a      	ldrh	r2, [r1, #12]
 8003de8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dec:	d032      	beq.n	8003e54 <__ssputs_r+0x80>
 8003dee:	6825      	ldr	r5, [r4, #0]
 8003df0:	6909      	ldr	r1, [r1, #16]
 8003df2:	eba5 0901 	sub.w	r9, r5, r1
 8003df6:	6965      	ldr	r5, [r4, #20]
 8003df8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e00:	3301      	adds	r3, #1
 8003e02:	444b      	add	r3, r9
 8003e04:	106d      	asrs	r5, r5, #1
 8003e06:	429d      	cmp	r5, r3
 8003e08:	bf38      	it	cc
 8003e0a:	461d      	movcc	r5, r3
 8003e0c:	0553      	lsls	r3, r2, #21
 8003e0e:	d531      	bpl.n	8003e74 <__ssputs_r+0xa0>
 8003e10:	4629      	mov	r1, r5
 8003e12:	f000 fb39 	bl	8004488 <_malloc_r>
 8003e16:	4606      	mov	r6, r0
 8003e18:	b950      	cbnz	r0, 8003e30 <__ssputs_r+0x5c>
 8003e1a:	230c      	movs	r3, #12
 8003e1c:	f8ca 3000 	str.w	r3, [sl]
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e26:	81a3      	strh	r3, [r4, #12]
 8003e28:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e30:	6921      	ldr	r1, [r4, #16]
 8003e32:	464a      	mov	r2, r9
 8003e34:	f7ff ff98 	bl	8003d68 <memcpy>
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e42:	81a3      	strh	r3, [r4, #12]
 8003e44:	6126      	str	r6, [r4, #16]
 8003e46:	6165      	str	r5, [r4, #20]
 8003e48:	444e      	add	r6, r9
 8003e4a:	eba5 0509 	sub.w	r5, r5, r9
 8003e4e:	6026      	str	r6, [r4, #0]
 8003e50:	60a5      	str	r5, [r4, #8]
 8003e52:	463e      	mov	r6, r7
 8003e54:	42be      	cmp	r6, r7
 8003e56:	d900      	bls.n	8003e5a <__ssputs_r+0x86>
 8003e58:	463e      	mov	r6, r7
 8003e5a:	4632      	mov	r2, r6
 8003e5c:	6820      	ldr	r0, [r4, #0]
 8003e5e:	4641      	mov	r1, r8
 8003e60:	f000 faa8 	bl	80043b4 <memmove>
 8003e64:	68a3      	ldr	r3, [r4, #8]
 8003e66:	6822      	ldr	r2, [r4, #0]
 8003e68:	1b9b      	subs	r3, r3, r6
 8003e6a:	4432      	add	r2, r6
 8003e6c:	60a3      	str	r3, [r4, #8]
 8003e6e:	6022      	str	r2, [r4, #0]
 8003e70:	2000      	movs	r0, #0
 8003e72:	e7db      	b.n	8003e2c <__ssputs_r+0x58>
 8003e74:	462a      	mov	r2, r5
 8003e76:	f000 fb61 	bl	800453c <_realloc_r>
 8003e7a:	4606      	mov	r6, r0
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d1e1      	bne.n	8003e44 <__ssputs_r+0x70>
 8003e80:	6921      	ldr	r1, [r4, #16]
 8003e82:	4650      	mov	r0, sl
 8003e84:	f000 fab0 	bl	80043e8 <_free_r>
 8003e88:	e7c7      	b.n	8003e1a <__ssputs_r+0x46>
	...

08003e8c <_svfiprintf_r>:
 8003e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e90:	4698      	mov	r8, r3
 8003e92:	898b      	ldrh	r3, [r1, #12]
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	b09d      	sub	sp, #116	; 0x74
 8003e98:	4607      	mov	r7, r0
 8003e9a:	460d      	mov	r5, r1
 8003e9c:	4614      	mov	r4, r2
 8003e9e:	d50e      	bpl.n	8003ebe <_svfiprintf_r+0x32>
 8003ea0:	690b      	ldr	r3, [r1, #16]
 8003ea2:	b963      	cbnz	r3, 8003ebe <_svfiprintf_r+0x32>
 8003ea4:	2140      	movs	r1, #64	; 0x40
 8003ea6:	f000 faef 	bl	8004488 <_malloc_r>
 8003eaa:	6028      	str	r0, [r5, #0]
 8003eac:	6128      	str	r0, [r5, #16]
 8003eae:	b920      	cbnz	r0, 8003eba <_svfiprintf_r+0x2e>
 8003eb0:	230c      	movs	r3, #12
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb8:	e0d1      	b.n	800405e <_svfiprintf_r+0x1d2>
 8003eba:	2340      	movs	r3, #64	; 0x40
 8003ebc:	616b      	str	r3, [r5, #20]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ec2:	2320      	movs	r3, #32
 8003ec4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ec8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ecc:	2330      	movs	r3, #48	; 0x30
 8003ece:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004078 <_svfiprintf_r+0x1ec>
 8003ed2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ed6:	f04f 0901 	mov.w	r9, #1
 8003eda:	4623      	mov	r3, r4
 8003edc:	469a      	mov	sl, r3
 8003ede:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ee2:	b10a      	cbz	r2, 8003ee8 <_svfiprintf_r+0x5c>
 8003ee4:	2a25      	cmp	r2, #37	; 0x25
 8003ee6:	d1f9      	bne.n	8003edc <_svfiprintf_r+0x50>
 8003ee8:	ebba 0b04 	subs.w	fp, sl, r4
 8003eec:	d00b      	beq.n	8003f06 <_svfiprintf_r+0x7a>
 8003eee:	465b      	mov	r3, fp
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	4638      	mov	r0, r7
 8003ef6:	f7ff ff6d 	bl	8003dd4 <__ssputs_r>
 8003efa:	3001      	adds	r0, #1
 8003efc:	f000 80aa 	beq.w	8004054 <_svfiprintf_r+0x1c8>
 8003f00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f02:	445a      	add	r2, fp
 8003f04:	9209      	str	r2, [sp, #36]	; 0x24
 8003f06:	f89a 3000 	ldrb.w	r3, [sl]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80a2 	beq.w	8004054 <_svfiprintf_r+0x1c8>
 8003f10:	2300      	movs	r3, #0
 8003f12:	f04f 32ff 	mov.w	r2, #4294967295
 8003f16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f1a:	f10a 0a01 	add.w	sl, sl, #1
 8003f1e:	9304      	str	r3, [sp, #16]
 8003f20:	9307      	str	r3, [sp, #28]
 8003f22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f26:	931a      	str	r3, [sp, #104]	; 0x68
 8003f28:	4654      	mov	r4, sl
 8003f2a:	2205      	movs	r2, #5
 8003f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f30:	4851      	ldr	r0, [pc, #324]	; (8004078 <_svfiprintf_r+0x1ec>)
 8003f32:	f7fc f95d 	bl	80001f0 <memchr>
 8003f36:	9a04      	ldr	r2, [sp, #16]
 8003f38:	b9d8      	cbnz	r0, 8003f72 <_svfiprintf_r+0xe6>
 8003f3a:	06d0      	lsls	r0, r2, #27
 8003f3c:	bf44      	itt	mi
 8003f3e:	2320      	movmi	r3, #32
 8003f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f44:	0711      	lsls	r1, r2, #28
 8003f46:	bf44      	itt	mi
 8003f48:	232b      	movmi	r3, #43	; 0x2b
 8003f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f52:	2b2a      	cmp	r3, #42	; 0x2a
 8003f54:	d015      	beq.n	8003f82 <_svfiprintf_r+0xf6>
 8003f56:	9a07      	ldr	r2, [sp, #28]
 8003f58:	4654      	mov	r4, sl
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	f04f 0c0a 	mov.w	ip, #10
 8003f60:	4621      	mov	r1, r4
 8003f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f66:	3b30      	subs	r3, #48	; 0x30
 8003f68:	2b09      	cmp	r3, #9
 8003f6a:	d94e      	bls.n	800400a <_svfiprintf_r+0x17e>
 8003f6c:	b1b0      	cbz	r0, 8003f9c <_svfiprintf_r+0x110>
 8003f6e:	9207      	str	r2, [sp, #28]
 8003f70:	e014      	b.n	8003f9c <_svfiprintf_r+0x110>
 8003f72:	eba0 0308 	sub.w	r3, r0, r8
 8003f76:	fa09 f303 	lsl.w	r3, r9, r3
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	9304      	str	r3, [sp, #16]
 8003f7e:	46a2      	mov	sl, r4
 8003f80:	e7d2      	b.n	8003f28 <_svfiprintf_r+0x9c>
 8003f82:	9b03      	ldr	r3, [sp, #12]
 8003f84:	1d19      	adds	r1, r3, #4
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	9103      	str	r1, [sp, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bfbb      	ittet	lt
 8003f8e:	425b      	neglt	r3, r3
 8003f90:	f042 0202 	orrlt.w	r2, r2, #2
 8003f94:	9307      	strge	r3, [sp, #28]
 8003f96:	9307      	strlt	r3, [sp, #28]
 8003f98:	bfb8      	it	lt
 8003f9a:	9204      	strlt	r2, [sp, #16]
 8003f9c:	7823      	ldrb	r3, [r4, #0]
 8003f9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003fa0:	d10c      	bne.n	8003fbc <_svfiprintf_r+0x130>
 8003fa2:	7863      	ldrb	r3, [r4, #1]
 8003fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8003fa6:	d135      	bne.n	8004014 <_svfiprintf_r+0x188>
 8003fa8:	9b03      	ldr	r3, [sp, #12]
 8003faa:	1d1a      	adds	r2, r3, #4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	9203      	str	r2, [sp, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bfb8      	it	lt
 8003fb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fb8:	3402      	adds	r4, #2
 8003fba:	9305      	str	r3, [sp, #20]
 8003fbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004088 <_svfiprintf_r+0x1fc>
 8003fc0:	7821      	ldrb	r1, [r4, #0]
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	4650      	mov	r0, sl
 8003fc6:	f7fc f913 	bl	80001f0 <memchr>
 8003fca:	b140      	cbz	r0, 8003fde <_svfiprintf_r+0x152>
 8003fcc:	2340      	movs	r3, #64	; 0x40
 8003fce:	eba0 000a 	sub.w	r0, r0, sl
 8003fd2:	fa03 f000 	lsl.w	r0, r3, r0
 8003fd6:	9b04      	ldr	r3, [sp, #16]
 8003fd8:	4303      	orrs	r3, r0
 8003fda:	3401      	adds	r4, #1
 8003fdc:	9304      	str	r3, [sp, #16]
 8003fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fe2:	4826      	ldr	r0, [pc, #152]	; (800407c <_svfiprintf_r+0x1f0>)
 8003fe4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fe8:	2206      	movs	r2, #6
 8003fea:	f7fc f901 	bl	80001f0 <memchr>
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	d038      	beq.n	8004064 <_svfiprintf_r+0x1d8>
 8003ff2:	4b23      	ldr	r3, [pc, #140]	; (8004080 <_svfiprintf_r+0x1f4>)
 8003ff4:	bb1b      	cbnz	r3, 800403e <_svfiprintf_r+0x1b2>
 8003ff6:	9b03      	ldr	r3, [sp, #12]
 8003ff8:	3307      	adds	r3, #7
 8003ffa:	f023 0307 	bic.w	r3, r3, #7
 8003ffe:	3308      	adds	r3, #8
 8004000:	9303      	str	r3, [sp, #12]
 8004002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004004:	4433      	add	r3, r6
 8004006:	9309      	str	r3, [sp, #36]	; 0x24
 8004008:	e767      	b.n	8003eda <_svfiprintf_r+0x4e>
 800400a:	fb0c 3202 	mla	r2, ip, r2, r3
 800400e:	460c      	mov	r4, r1
 8004010:	2001      	movs	r0, #1
 8004012:	e7a5      	b.n	8003f60 <_svfiprintf_r+0xd4>
 8004014:	2300      	movs	r3, #0
 8004016:	3401      	adds	r4, #1
 8004018:	9305      	str	r3, [sp, #20]
 800401a:	4619      	mov	r1, r3
 800401c:	f04f 0c0a 	mov.w	ip, #10
 8004020:	4620      	mov	r0, r4
 8004022:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004026:	3a30      	subs	r2, #48	; 0x30
 8004028:	2a09      	cmp	r2, #9
 800402a:	d903      	bls.n	8004034 <_svfiprintf_r+0x1a8>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0c5      	beq.n	8003fbc <_svfiprintf_r+0x130>
 8004030:	9105      	str	r1, [sp, #20]
 8004032:	e7c3      	b.n	8003fbc <_svfiprintf_r+0x130>
 8004034:	fb0c 2101 	mla	r1, ip, r1, r2
 8004038:	4604      	mov	r4, r0
 800403a:	2301      	movs	r3, #1
 800403c:	e7f0      	b.n	8004020 <_svfiprintf_r+0x194>
 800403e:	ab03      	add	r3, sp, #12
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	462a      	mov	r2, r5
 8004044:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <_svfiprintf_r+0x1f8>)
 8004046:	a904      	add	r1, sp, #16
 8004048:	4638      	mov	r0, r7
 800404a:	f3af 8000 	nop.w
 800404e:	1c42      	adds	r2, r0, #1
 8004050:	4606      	mov	r6, r0
 8004052:	d1d6      	bne.n	8004002 <_svfiprintf_r+0x176>
 8004054:	89ab      	ldrh	r3, [r5, #12]
 8004056:	065b      	lsls	r3, r3, #25
 8004058:	f53f af2c 	bmi.w	8003eb4 <_svfiprintf_r+0x28>
 800405c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800405e:	b01d      	add	sp, #116	; 0x74
 8004060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004064:	ab03      	add	r3, sp, #12
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	462a      	mov	r2, r5
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <_svfiprintf_r+0x1f8>)
 800406c:	a904      	add	r1, sp, #16
 800406e:	4638      	mov	r0, r7
 8004070:	f000 f87a 	bl	8004168 <_printf_i>
 8004074:	e7eb      	b.n	800404e <_svfiprintf_r+0x1c2>
 8004076:	bf00      	nop
 8004078:	0800475c 	.word	0x0800475c
 800407c:	08004766 	.word	0x08004766
 8004080:	00000000 	.word	0x00000000
 8004084:	08003dd5 	.word	0x08003dd5
 8004088:	08004762 	.word	0x08004762

0800408c <_printf_common>:
 800408c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004090:	4616      	mov	r6, r2
 8004092:	4699      	mov	r9, r3
 8004094:	688a      	ldr	r2, [r1, #8]
 8004096:	690b      	ldr	r3, [r1, #16]
 8004098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800409c:	4293      	cmp	r3, r2
 800409e:	bfb8      	it	lt
 80040a0:	4613      	movlt	r3, r2
 80040a2:	6033      	str	r3, [r6, #0]
 80040a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040a8:	4607      	mov	r7, r0
 80040aa:	460c      	mov	r4, r1
 80040ac:	b10a      	cbz	r2, 80040b2 <_printf_common+0x26>
 80040ae:	3301      	adds	r3, #1
 80040b0:	6033      	str	r3, [r6, #0]
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	0699      	lsls	r1, r3, #26
 80040b6:	bf42      	ittt	mi
 80040b8:	6833      	ldrmi	r3, [r6, #0]
 80040ba:	3302      	addmi	r3, #2
 80040bc:	6033      	strmi	r3, [r6, #0]
 80040be:	6825      	ldr	r5, [r4, #0]
 80040c0:	f015 0506 	ands.w	r5, r5, #6
 80040c4:	d106      	bne.n	80040d4 <_printf_common+0x48>
 80040c6:	f104 0a19 	add.w	sl, r4, #25
 80040ca:	68e3      	ldr	r3, [r4, #12]
 80040cc:	6832      	ldr	r2, [r6, #0]
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	42ab      	cmp	r3, r5
 80040d2:	dc26      	bgt.n	8004122 <_printf_common+0x96>
 80040d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040d8:	1e13      	subs	r3, r2, #0
 80040da:	6822      	ldr	r2, [r4, #0]
 80040dc:	bf18      	it	ne
 80040de:	2301      	movne	r3, #1
 80040e0:	0692      	lsls	r2, r2, #26
 80040e2:	d42b      	bmi.n	800413c <_printf_common+0xb0>
 80040e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040e8:	4649      	mov	r1, r9
 80040ea:	4638      	mov	r0, r7
 80040ec:	47c0      	blx	r8
 80040ee:	3001      	adds	r0, #1
 80040f0:	d01e      	beq.n	8004130 <_printf_common+0xa4>
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	68e5      	ldr	r5, [r4, #12]
 80040f6:	6832      	ldr	r2, [r6, #0]
 80040f8:	f003 0306 	and.w	r3, r3, #6
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	bf08      	it	eq
 8004100:	1aad      	subeq	r5, r5, r2
 8004102:	68a3      	ldr	r3, [r4, #8]
 8004104:	6922      	ldr	r2, [r4, #16]
 8004106:	bf0c      	ite	eq
 8004108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800410c:	2500      	movne	r5, #0
 800410e:	4293      	cmp	r3, r2
 8004110:	bfc4      	itt	gt
 8004112:	1a9b      	subgt	r3, r3, r2
 8004114:	18ed      	addgt	r5, r5, r3
 8004116:	2600      	movs	r6, #0
 8004118:	341a      	adds	r4, #26
 800411a:	42b5      	cmp	r5, r6
 800411c:	d11a      	bne.n	8004154 <_printf_common+0xc8>
 800411e:	2000      	movs	r0, #0
 8004120:	e008      	b.n	8004134 <_printf_common+0xa8>
 8004122:	2301      	movs	r3, #1
 8004124:	4652      	mov	r2, sl
 8004126:	4649      	mov	r1, r9
 8004128:	4638      	mov	r0, r7
 800412a:	47c0      	blx	r8
 800412c:	3001      	adds	r0, #1
 800412e:	d103      	bne.n	8004138 <_printf_common+0xac>
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004138:	3501      	adds	r5, #1
 800413a:	e7c6      	b.n	80040ca <_printf_common+0x3e>
 800413c:	18e1      	adds	r1, r4, r3
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	2030      	movs	r0, #48	; 0x30
 8004142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004146:	4422      	add	r2, r4
 8004148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800414c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004150:	3302      	adds	r3, #2
 8004152:	e7c7      	b.n	80040e4 <_printf_common+0x58>
 8004154:	2301      	movs	r3, #1
 8004156:	4622      	mov	r2, r4
 8004158:	4649      	mov	r1, r9
 800415a:	4638      	mov	r0, r7
 800415c:	47c0      	blx	r8
 800415e:	3001      	adds	r0, #1
 8004160:	d0e6      	beq.n	8004130 <_printf_common+0xa4>
 8004162:	3601      	adds	r6, #1
 8004164:	e7d9      	b.n	800411a <_printf_common+0x8e>
	...

08004168 <_printf_i>:
 8004168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800416c:	460c      	mov	r4, r1
 800416e:	4691      	mov	r9, r2
 8004170:	7e27      	ldrb	r7, [r4, #24]
 8004172:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004174:	2f78      	cmp	r7, #120	; 0x78
 8004176:	4680      	mov	r8, r0
 8004178:	469a      	mov	sl, r3
 800417a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800417e:	d807      	bhi.n	8004190 <_printf_i+0x28>
 8004180:	2f62      	cmp	r7, #98	; 0x62
 8004182:	d80a      	bhi.n	800419a <_printf_i+0x32>
 8004184:	2f00      	cmp	r7, #0
 8004186:	f000 80d8 	beq.w	800433a <_printf_i+0x1d2>
 800418a:	2f58      	cmp	r7, #88	; 0x58
 800418c:	f000 80a3 	beq.w	80042d6 <_printf_i+0x16e>
 8004190:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004198:	e03a      	b.n	8004210 <_printf_i+0xa8>
 800419a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800419e:	2b15      	cmp	r3, #21
 80041a0:	d8f6      	bhi.n	8004190 <_printf_i+0x28>
 80041a2:	a001      	add	r0, pc, #4	; (adr r0, 80041a8 <_printf_i+0x40>)
 80041a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041a8:	08004201 	.word	0x08004201
 80041ac:	08004215 	.word	0x08004215
 80041b0:	08004191 	.word	0x08004191
 80041b4:	08004191 	.word	0x08004191
 80041b8:	08004191 	.word	0x08004191
 80041bc:	08004191 	.word	0x08004191
 80041c0:	08004215 	.word	0x08004215
 80041c4:	08004191 	.word	0x08004191
 80041c8:	08004191 	.word	0x08004191
 80041cc:	08004191 	.word	0x08004191
 80041d0:	08004191 	.word	0x08004191
 80041d4:	08004321 	.word	0x08004321
 80041d8:	08004245 	.word	0x08004245
 80041dc:	08004303 	.word	0x08004303
 80041e0:	08004191 	.word	0x08004191
 80041e4:	08004191 	.word	0x08004191
 80041e8:	08004343 	.word	0x08004343
 80041ec:	08004191 	.word	0x08004191
 80041f0:	08004245 	.word	0x08004245
 80041f4:	08004191 	.word	0x08004191
 80041f8:	08004191 	.word	0x08004191
 80041fc:	0800430b 	.word	0x0800430b
 8004200:	680b      	ldr	r3, [r1, #0]
 8004202:	1d1a      	adds	r2, r3, #4
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	600a      	str	r2, [r1, #0]
 8004208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800420c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004210:	2301      	movs	r3, #1
 8004212:	e0a3      	b.n	800435c <_printf_i+0x1f4>
 8004214:	6825      	ldr	r5, [r4, #0]
 8004216:	6808      	ldr	r0, [r1, #0]
 8004218:	062e      	lsls	r6, r5, #24
 800421a:	f100 0304 	add.w	r3, r0, #4
 800421e:	d50a      	bpl.n	8004236 <_printf_i+0xce>
 8004220:	6805      	ldr	r5, [r0, #0]
 8004222:	600b      	str	r3, [r1, #0]
 8004224:	2d00      	cmp	r5, #0
 8004226:	da03      	bge.n	8004230 <_printf_i+0xc8>
 8004228:	232d      	movs	r3, #45	; 0x2d
 800422a:	426d      	negs	r5, r5
 800422c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004230:	485e      	ldr	r0, [pc, #376]	; (80043ac <_printf_i+0x244>)
 8004232:	230a      	movs	r3, #10
 8004234:	e019      	b.n	800426a <_printf_i+0x102>
 8004236:	f015 0f40 	tst.w	r5, #64	; 0x40
 800423a:	6805      	ldr	r5, [r0, #0]
 800423c:	600b      	str	r3, [r1, #0]
 800423e:	bf18      	it	ne
 8004240:	b22d      	sxthne	r5, r5
 8004242:	e7ef      	b.n	8004224 <_printf_i+0xbc>
 8004244:	680b      	ldr	r3, [r1, #0]
 8004246:	6825      	ldr	r5, [r4, #0]
 8004248:	1d18      	adds	r0, r3, #4
 800424a:	6008      	str	r0, [r1, #0]
 800424c:	0628      	lsls	r0, r5, #24
 800424e:	d501      	bpl.n	8004254 <_printf_i+0xec>
 8004250:	681d      	ldr	r5, [r3, #0]
 8004252:	e002      	b.n	800425a <_printf_i+0xf2>
 8004254:	0669      	lsls	r1, r5, #25
 8004256:	d5fb      	bpl.n	8004250 <_printf_i+0xe8>
 8004258:	881d      	ldrh	r5, [r3, #0]
 800425a:	4854      	ldr	r0, [pc, #336]	; (80043ac <_printf_i+0x244>)
 800425c:	2f6f      	cmp	r7, #111	; 0x6f
 800425e:	bf0c      	ite	eq
 8004260:	2308      	moveq	r3, #8
 8004262:	230a      	movne	r3, #10
 8004264:	2100      	movs	r1, #0
 8004266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800426a:	6866      	ldr	r6, [r4, #4]
 800426c:	60a6      	str	r6, [r4, #8]
 800426e:	2e00      	cmp	r6, #0
 8004270:	bfa2      	ittt	ge
 8004272:	6821      	ldrge	r1, [r4, #0]
 8004274:	f021 0104 	bicge.w	r1, r1, #4
 8004278:	6021      	strge	r1, [r4, #0]
 800427a:	b90d      	cbnz	r5, 8004280 <_printf_i+0x118>
 800427c:	2e00      	cmp	r6, #0
 800427e:	d04d      	beq.n	800431c <_printf_i+0x1b4>
 8004280:	4616      	mov	r6, r2
 8004282:	fbb5 f1f3 	udiv	r1, r5, r3
 8004286:	fb03 5711 	mls	r7, r3, r1, r5
 800428a:	5dc7      	ldrb	r7, [r0, r7]
 800428c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004290:	462f      	mov	r7, r5
 8004292:	42bb      	cmp	r3, r7
 8004294:	460d      	mov	r5, r1
 8004296:	d9f4      	bls.n	8004282 <_printf_i+0x11a>
 8004298:	2b08      	cmp	r3, #8
 800429a:	d10b      	bne.n	80042b4 <_printf_i+0x14c>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	07df      	lsls	r7, r3, #31
 80042a0:	d508      	bpl.n	80042b4 <_printf_i+0x14c>
 80042a2:	6923      	ldr	r3, [r4, #16]
 80042a4:	6861      	ldr	r1, [r4, #4]
 80042a6:	4299      	cmp	r1, r3
 80042a8:	bfde      	ittt	le
 80042aa:	2330      	movle	r3, #48	; 0x30
 80042ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042b4:	1b92      	subs	r2, r2, r6
 80042b6:	6122      	str	r2, [r4, #16]
 80042b8:	f8cd a000 	str.w	sl, [sp]
 80042bc:	464b      	mov	r3, r9
 80042be:	aa03      	add	r2, sp, #12
 80042c0:	4621      	mov	r1, r4
 80042c2:	4640      	mov	r0, r8
 80042c4:	f7ff fee2 	bl	800408c <_printf_common>
 80042c8:	3001      	adds	r0, #1
 80042ca:	d14c      	bne.n	8004366 <_printf_i+0x1fe>
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295
 80042d0:	b004      	add	sp, #16
 80042d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d6:	4835      	ldr	r0, [pc, #212]	; (80043ac <_printf_i+0x244>)
 80042d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	680e      	ldr	r6, [r1, #0]
 80042e0:	061f      	lsls	r7, r3, #24
 80042e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80042e6:	600e      	str	r6, [r1, #0]
 80042e8:	d514      	bpl.n	8004314 <_printf_i+0x1ac>
 80042ea:	07d9      	lsls	r1, r3, #31
 80042ec:	bf44      	itt	mi
 80042ee:	f043 0320 	orrmi.w	r3, r3, #32
 80042f2:	6023      	strmi	r3, [r4, #0]
 80042f4:	b91d      	cbnz	r5, 80042fe <_printf_i+0x196>
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	f023 0320 	bic.w	r3, r3, #32
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	2310      	movs	r3, #16
 8004300:	e7b0      	b.n	8004264 <_printf_i+0xfc>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	f043 0320 	orr.w	r3, r3, #32
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	2378      	movs	r3, #120	; 0x78
 800430c:	4828      	ldr	r0, [pc, #160]	; (80043b0 <_printf_i+0x248>)
 800430e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004312:	e7e3      	b.n	80042dc <_printf_i+0x174>
 8004314:	065e      	lsls	r6, r3, #25
 8004316:	bf48      	it	mi
 8004318:	b2ad      	uxthmi	r5, r5
 800431a:	e7e6      	b.n	80042ea <_printf_i+0x182>
 800431c:	4616      	mov	r6, r2
 800431e:	e7bb      	b.n	8004298 <_printf_i+0x130>
 8004320:	680b      	ldr	r3, [r1, #0]
 8004322:	6826      	ldr	r6, [r4, #0]
 8004324:	6960      	ldr	r0, [r4, #20]
 8004326:	1d1d      	adds	r5, r3, #4
 8004328:	600d      	str	r5, [r1, #0]
 800432a:	0635      	lsls	r5, r6, #24
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	d501      	bpl.n	8004334 <_printf_i+0x1cc>
 8004330:	6018      	str	r0, [r3, #0]
 8004332:	e002      	b.n	800433a <_printf_i+0x1d2>
 8004334:	0671      	lsls	r1, r6, #25
 8004336:	d5fb      	bpl.n	8004330 <_printf_i+0x1c8>
 8004338:	8018      	strh	r0, [r3, #0]
 800433a:	2300      	movs	r3, #0
 800433c:	6123      	str	r3, [r4, #16]
 800433e:	4616      	mov	r6, r2
 8004340:	e7ba      	b.n	80042b8 <_printf_i+0x150>
 8004342:	680b      	ldr	r3, [r1, #0]
 8004344:	1d1a      	adds	r2, r3, #4
 8004346:	600a      	str	r2, [r1, #0]
 8004348:	681e      	ldr	r6, [r3, #0]
 800434a:	6862      	ldr	r2, [r4, #4]
 800434c:	2100      	movs	r1, #0
 800434e:	4630      	mov	r0, r6
 8004350:	f7fb ff4e 	bl	80001f0 <memchr>
 8004354:	b108      	cbz	r0, 800435a <_printf_i+0x1f2>
 8004356:	1b80      	subs	r0, r0, r6
 8004358:	6060      	str	r0, [r4, #4]
 800435a:	6863      	ldr	r3, [r4, #4]
 800435c:	6123      	str	r3, [r4, #16]
 800435e:	2300      	movs	r3, #0
 8004360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004364:	e7a8      	b.n	80042b8 <_printf_i+0x150>
 8004366:	6923      	ldr	r3, [r4, #16]
 8004368:	4632      	mov	r2, r6
 800436a:	4649      	mov	r1, r9
 800436c:	4640      	mov	r0, r8
 800436e:	47d0      	blx	sl
 8004370:	3001      	adds	r0, #1
 8004372:	d0ab      	beq.n	80042cc <_printf_i+0x164>
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	079b      	lsls	r3, r3, #30
 8004378:	d413      	bmi.n	80043a2 <_printf_i+0x23a>
 800437a:	68e0      	ldr	r0, [r4, #12]
 800437c:	9b03      	ldr	r3, [sp, #12]
 800437e:	4298      	cmp	r0, r3
 8004380:	bfb8      	it	lt
 8004382:	4618      	movlt	r0, r3
 8004384:	e7a4      	b.n	80042d0 <_printf_i+0x168>
 8004386:	2301      	movs	r3, #1
 8004388:	4632      	mov	r2, r6
 800438a:	4649      	mov	r1, r9
 800438c:	4640      	mov	r0, r8
 800438e:	47d0      	blx	sl
 8004390:	3001      	adds	r0, #1
 8004392:	d09b      	beq.n	80042cc <_printf_i+0x164>
 8004394:	3501      	adds	r5, #1
 8004396:	68e3      	ldr	r3, [r4, #12]
 8004398:	9903      	ldr	r1, [sp, #12]
 800439a:	1a5b      	subs	r3, r3, r1
 800439c:	42ab      	cmp	r3, r5
 800439e:	dcf2      	bgt.n	8004386 <_printf_i+0x21e>
 80043a0:	e7eb      	b.n	800437a <_printf_i+0x212>
 80043a2:	2500      	movs	r5, #0
 80043a4:	f104 0619 	add.w	r6, r4, #25
 80043a8:	e7f5      	b.n	8004396 <_printf_i+0x22e>
 80043aa:	bf00      	nop
 80043ac:	0800476d 	.word	0x0800476d
 80043b0:	0800477e 	.word	0x0800477e

080043b4 <memmove>:
 80043b4:	4288      	cmp	r0, r1
 80043b6:	b510      	push	{r4, lr}
 80043b8:	eb01 0402 	add.w	r4, r1, r2
 80043bc:	d902      	bls.n	80043c4 <memmove+0x10>
 80043be:	4284      	cmp	r4, r0
 80043c0:	4623      	mov	r3, r4
 80043c2:	d807      	bhi.n	80043d4 <memmove+0x20>
 80043c4:	1e43      	subs	r3, r0, #1
 80043c6:	42a1      	cmp	r1, r4
 80043c8:	d008      	beq.n	80043dc <memmove+0x28>
 80043ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043d2:	e7f8      	b.n	80043c6 <memmove+0x12>
 80043d4:	4402      	add	r2, r0
 80043d6:	4601      	mov	r1, r0
 80043d8:	428a      	cmp	r2, r1
 80043da:	d100      	bne.n	80043de <memmove+0x2a>
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043e6:	e7f7      	b.n	80043d8 <memmove+0x24>

080043e8 <_free_r>:
 80043e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043ea:	2900      	cmp	r1, #0
 80043ec:	d048      	beq.n	8004480 <_free_r+0x98>
 80043ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043f2:	9001      	str	r0, [sp, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f1a1 0404 	sub.w	r4, r1, #4
 80043fa:	bfb8      	it	lt
 80043fc:	18e4      	addlt	r4, r4, r3
 80043fe:	f000 f8d3 	bl	80045a8 <__malloc_lock>
 8004402:	4a20      	ldr	r2, [pc, #128]	; (8004484 <_free_r+0x9c>)
 8004404:	9801      	ldr	r0, [sp, #4]
 8004406:	6813      	ldr	r3, [r2, #0]
 8004408:	4615      	mov	r5, r2
 800440a:	b933      	cbnz	r3, 800441a <_free_r+0x32>
 800440c:	6063      	str	r3, [r4, #4]
 800440e:	6014      	str	r4, [r2, #0]
 8004410:	b003      	add	sp, #12
 8004412:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004416:	f000 b8cd 	b.w	80045b4 <__malloc_unlock>
 800441a:	42a3      	cmp	r3, r4
 800441c:	d90b      	bls.n	8004436 <_free_r+0x4e>
 800441e:	6821      	ldr	r1, [r4, #0]
 8004420:	1862      	adds	r2, r4, r1
 8004422:	4293      	cmp	r3, r2
 8004424:	bf04      	itt	eq
 8004426:	681a      	ldreq	r2, [r3, #0]
 8004428:	685b      	ldreq	r3, [r3, #4]
 800442a:	6063      	str	r3, [r4, #4]
 800442c:	bf04      	itt	eq
 800442e:	1852      	addeq	r2, r2, r1
 8004430:	6022      	streq	r2, [r4, #0]
 8004432:	602c      	str	r4, [r5, #0]
 8004434:	e7ec      	b.n	8004410 <_free_r+0x28>
 8004436:	461a      	mov	r2, r3
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	b10b      	cbz	r3, 8004440 <_free_r+0x58>
 800443c:	42a3      	cmp	r3, r4
 800443e:	d9fa      	bls.n	8004436 <_free_r+0x4e>
 8004440:	6811      	ldr	r1, [r2, #0]
 8004442:	1855      	adds	r5, r2, r1
 8004444:	42a5      	cmp	r5, r4
 8004446:	d10b      	bne.n	8004460 <_free_r+0x78>
 8004448:	6824      	ldr	r4, [r4, #0]
 800444a:	4421      	add	r1, r4
 800444c:	1854      	adds	r4, r2, r1
 800444e:	42a3      	cmp	r3, r4
 8004450:	6011      	str	r1, [r2, #0]
 8004452:	d1dd      	bne.n	8004410 <_free_r+0x28>
 8004454:	681c      	ldr	r4, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	6053      	str	r3, [r2, #4]
 800445a:	4421      	add	r1, r4
 800445c:	6011      	str	r1, [r2, #0]
 800445e:	e7d7      	b.n	8004410 <_free_r+0x28>
 8004460:	d902      	bls.n	8004468 <_free_r+0x80>
 8004462:	230c      	movs	r3, #12
 8004464:	6003      	str	r3, [r0, #0]
 8004466:	e7d3      	b.n	8004410 <_free_r+0x28>
 8004468:	6825      	ldr	r5, [r4, #0]
 800446a:	1961      	adds	r1, r4, r5
 800446c:	428b      	cmp	r3, r1
 800446e:	bf04      	itt	eq
 8004470:	6819      	ldreq	r1, [r3, #0]
 8004472:	685b      	ldreq	r3, [r3, #4]
 8004474:	6063      	str	r3, [r4, #4]
 8004476:	bf04      	itt	eq
 8004478:	1949      	addeq	r1, r1, r5
 800447a:	6021      	streq	r1, [r4, #0]
 800447c:	6054      	str	r4, [r2, #4]
 800447e:	e7c7      	b.n	8004410 <_free_r+0x28>
 8004480:	b003      	add	sp, #12
 8004482:	bd30      	pop	{r4, r5, pc}
 8004484:	20000108 	.word	0x20000108

08004488 <_malloc_r>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	1ccd      	adds	r5, r1, #3
 800448c:	f025 0503 	bic.w	r5, r5, #3
 8004490:	3508      	adds	r5, #8
 8004492:	2d0c      	cmp	r5, #12
 8004494:	bf38      	it	cc
 8004496:	250c      	movcc	r5, #12
 8004498:	2d00      	cmp	r5, #0
 800449a:	4606      	mov	r6, r0
 800449c:	db01      	blt.n	80044a2 <_malloc_r+0x1a>
 800449e:	42a9      	cmp	r1, r5
 80044a0:	d903      	bls.n	80044aa <_malloc_r+0x22>
 80044a2:	230c      	movs	r3, #12
 80044a4:	6033      	str	r3, [r6, #0]
 80044a6:	2000      	movs	r0, #0
 80044a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044aa:	f000 f87d 	bl	80045a8 <__malloc_lock>
 80044ae:	4921      	ldr	r1, [pc, #132]	; (8004534 <_malloc_r+0xac>)
 80044b0:	680a      	ldr	r2, [r1, #0]
 80044b2:	4614      	mov	r4, r2
 80044b4:	b99c      	cbnz	r4, 80044de <_malloc_r+0x56>
 80044b6:	4f20      	ldr	r7, [pc, #128]	; (8004538 <_malloc_r+0xb0>)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	b923      	cbnz	r3, 80044c6 <_malloc_r+0x3e>
 80044bc:	4621      	mov	r1, r4
 80044be:	4630      	mov	r0, r6
 80044c0:	f000 f862 	bl	8004588 <_sbrk_r>
 80044c4:	6038      	str	r0, [r7, #0]
 80044c6:	4629      	mov	r1, r5
 80044c8:	4630      	mov	r0, r6
 80044ca:	f000 f85d 	bl	8004588 <_sbrk_r>
 80044ce:	1c43      	adds	r3, r0, #1
 80044d0:	d123      	bne.n	800451a <_malloc_r+0x92>
 80044d2:	230c      	movs	r3, #12
 80044d4:	6033      	str	r3, [r6, #0]
 80044d6:	4630      	mov	r0, r6
 80044d8:	f000 f86c 	bl	80045b4 <__malloc_unlock>
 80044dc:	e7e3      	b.n	80044a6 <_malloc_r+0x1e>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	1b5b      	subs	r3, r3, r5
 80044e2:	d417      	bmi.n	8004514 <_malloc_r+0x8c>
 80044e4:	2b0b      	cmp	r3, #11
 80044e6:	d903      	bls.n	80044f0 <_malloc_r+0x68>
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	441c      	add	r4, r3
 80044ec:	6025      	str	r5, [r4, #0]
 80044ee:	e004      	b.n	80044fa <_malloc_r+0x72>
 80044f0:	6863      	ldr	r3, [r4, #4]
 80044f2:	42a2      	cmp	r2, r4
 80044f4:	bf0c      	ite	eq
 80044f6:	600b      	streq	r3, [r1, #0]
 80044f8:	6053      	strne	r3, [r2, #4]
 80044fa:	4630      	mov	r0, r6
 80044fc:	f000 f85a 	bl	80045b4 <__malloc_unlock>
 8004500:	f104 000b 	add.w	r0, r4, #11
 8004504:	1d23      	adds	r3, r4, #4
 8004506:	f020 0007 	bic.w	r0, r0, #7
 800450a:	1ac2      	subs	r2, r0, r3
 800450c:	d0cc      	beq.n	80044a8 <_malloc_r+0x20>
 800450e:	1a1b      	subs	r3, r3, r0
 8004510:	50a3      	str	r3, [r4, r2]
 8004512:	e7c9      	b.n	80044a8 <_malloc_r+0x20>
 8004514:	4622      	mov	r2, r4
 8004516:	6864      	ldr	r4, [r4, #4]
 8004518:	e7cc      	b.n	80044b4 <_malloc_r+0x2c>
 800451a:	1cc4      	adds	r4, r0, #3
 800451c:	f024 0403 	bic.w	r4, r4, #3
 8004520:	42a0      	cmp	r0, r4
 8004522:	d0e3      	beq.n	80044ec <_malloc_r+0x64>
 8004524:	1a21      	subs	r1, r4, r0
 8004526:	4630      	mov	r0, r6
 8004528:	f000 f82e 	bl	8004588 <_sbrk_r>
 800452c:	3001      	adds	r0, #1
 800452e:	d1dd      	bne.n	80044ec <_malloc_r+0x64>
 8004530:	e7cf      	b.n	80044d2 <_malloc_r+0x4a>
 8004532:	bf00      	nop
 8004534:	20000108 	.word	0x20000108
 8004538:	2000010c 	.word	0x2000010c

0800453c <_realloc_r>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	4607      	mov	r7, r0
 8004540:	4614      	mov	r4, r2
 8004542:	460e      	mov	r6, r1
 8004544:	b921      	cbnz	r1, 8004550 <_realloc_r+0x14>
 8004546:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800454a:	4611      	mov	r1, r2
 800454c:	f7ff bf9c 	b.w	8004488 <_malloc_r>
 8004550:	b922      	cbnz	r2, 800455c <_realloc_r+0x20>
 8004552:	f7ff ff49 	bl	80043e8 <_free_r>
 8004556:	4625      	mov	r5, r4
 8004558:	4628      	mov	r0, r5
 800455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800455c:	f000 f830 	bl	80045c0 <_malloc_usable_size_r>
 8004560:	42a0      	cmp	r0, r4
 8004562:	d20f      	bcs.n	8004584 <_realloc_r+0x48>
 8004564:	4621      	mov	r1, r4
 8004566:	4638      	mov	r0, r7
 8004568:	f7ff ff8e 	bl	8004488 <_malloc_r>
 800456c:	4605      	mov	r5, r0
 800456e:	2800      	cmp	r0, #0
 8004570:	d0f2      	beq.n	8004558 <_realloc_r+0x1c>
 8004572:	4631      	mov	r1, r6
 8004574:	4622      	mov	r2, r4
 8004576:	f7ff fbf7 	bl	8003d68 <memcpy>
 800457a:	4631      	mov	r1, r6
 800457c:	4638      	mov	r0, r7
 800457e:	f7ff ff33 	bl	80043e8 <_free_r>
 8004582:	e7e9      	b.n	8004558 <_realloc_r+0x1c>
 8004584:	4635      	mov	r5, r6
 8004586:	e7e7      	b.n	8004558 <_realloc_r+0x1c>

08004588 <_sbrk_r>:
 8004588:	b538      	push	{r3, r4, r5, lr}
 800458a:	4d06      	ldr	r5, [pc, #24]	; (80045a4 <_sbrk_r+0x1c>)
 800458c:	2300      	movs	r3, #0
 800458e:	4604      	mov	r4, r0
 8004590:	4608      	mov	r0, r1
 8004592:	602b      	str	r3, [r5, #0]
 8004594:	f7fd f9ee 	bl	8001974 <_sbrk>
 8004598:	1c43      	adds	r3, r0, #1
 800459a:	d102      	bne.n	80045a2 <_sbrk_r+0x1a>
 800459c:	682b      	ldr	r3, [r5, #0]
 800459e:	b103      	cbz	r3, 80045a2 <_sbrk_r+0x1a>
 80045a0:	6023      	str	r3, [r4, #0]
 80045a2:	bd38      	pop	{r3, r4, r5, pc}
 80045a4:	200001a8 	.word	0x200001a8

080045a8 <__malloc_lock>:
 80045a8:	4801      	ldr	r0, [pc, #4]	; (80045b0 <__malloc_lock+0x8>)
 80045aa:	f000 b811 	b.w	80045d0 <__retarget_lock_acquire_recursive>
 80045ae:	bf00      	nop
 80045b0:	200001b0 	.word	0x200001b0

080045b4 <__malloc_unlock>:
 80045b4:	4801      	ldr	r0, [pc, #4]	; (80045bc <__malloc_unlock+0x8>)
 80045b6:	f000 b80c 	b.w	80045d2 <__retarget_lock_release_recursive>
 80045ba:	bf00      	nop
 80045bc:	200001b0 	.word	0x200001b0

080045c0 <_malloc_usable_size_r>:
 80045c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c4:	1f18      	subs	r0, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bfbc      	itt	lt
 80045ca:	580b      	ldrlt	r3, [r1, r0]
 80045cc:	18c0      	addlt	r0, r0, r3
 80045ce:	4770      	bx	lr

080045d0 <__retarget_lock_acquire_recursive>:
 80045d0:	4770      	bx	lr

080045d2 <__retarget_lock_release_recursive>:
 80045d2:	4770      	bx	lr

080045d4 <_init>:
 80045d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d6:	bf00      	nop
 80045d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045da:	bc08      	pop	{r3}
 80045dc:	469e      	mov	lr, r3
 80045de:	4770      	bx	lr

080045e0 <_fini>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr
